{"version":3,"sources":["components/cross.svg","components/AppContainer.tsx","model/Util.ts","model/Math.ts","model/Stats.ts","components/HomeView.tsx","components/SelectView.tsx","model/Storage.ts","components/MathView.tsx","components/SettingsView.tsx","components/StatsView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AppContainer","exit","this","props","exitPrompt","window","confirm","onExit","title","children","showExit","className","onClick","handleExit","bind","src","cross","alt","React","Component","rng","randomJS","Util","random","realZeroToOneExclusive","randInt","min","max","undefined","Math","floor","randChoice","arr","length","range","_","clone","obj","cloneDeep","shuffle","slice","i","j","extend","prop","plural","amount","text","formatSeconds","mills","round","formatDate","time","curTime","Date","getTime","days","months","date","diff","minutesAgo","hoursAgo","daysAgo","getDay","getMonth","getDate","compare","a","b","isEqual","MathOperators","SessionTypes","MathOperatorSymbols","SessionTypeNames","DefaultRange","MathFuncs","generateQuestion","num1","num2","oper","ans","Error","generateQuestionsRandom","type","pool1","pool2","numQuestions","questions","question","push","generateQuestionsOrdered","generateSession","options","isDefault","useRange","order","timeStarted","times","progress","total","generateDefaultSessionOptions","generateSessionResults","session","totalTime","reduce","t","individual","generateSessionIndividualResults","includes","index1","index2","startSession","StatFuncs","filterType","history","filter","v","getLatestDefault","getHistorySorted","sort","h1","h2","getFastest","result","fastest","splice","getSlowest","slowest","getIndividualAverage","filtered","count","sum","res","HomeView","state","sessionType","onStartPractice","view","onNavigateSelectSession","onNavigateStats","onNavigateSettings","e","target","value","setState","handleStartClick","onChange","handleSelectType","map","key","handleNavigate","RangeControlTypes","RangeControlTypeNames","SelectView","rangeType","numberQuestions","onStartSession","index","template","sessionTemplates","name","prompt","onAddSessionTemplate","onRemoveSessionTemplate","parseInt","Number","isNaN","NaN","isPool1","num","pool","indexOf","rangeControls","orderControls","templates","pattern","handleInputRangeAmount","onBlur","handleValidateRangeAmount","RangePool","onToggleNum","n","handleToggleRangePool","checked","handleSelectNumberQuestions","handleToggleShuffle","SessionTemplate","onStart","handleStartSessionTemplate","onRemove","handleRemoveTemplate","handleSelectRangeType","handleToggleRandom","handleStartSession","handleSaveTemplate","version","filename","DefaultData","settings","showProgressBar","StorageFuncs","verifyData","Array","isArray","serialize","data","JSON","stringify","deserialize","parse","load","auth","gitAcc","Gists","token","get","gist","message","body","files","content","updateLastSynced","save","edit","console","log","verifyAuth","username","loadAuth","localStorage","getItem","saveAuth","gists","all","pages","forEach","page","concat","Object","keys","id","owner","login","create","description","public","createGistRes","lastSynced","setItem","clearAuth","removeItem","MathView","input","setTimeout","startTime","elapsedTime","results","onFinishSession","curQuestion","autoFocus","placeholder","maxLength","size","handleInput","style","width","SettingsView","onUpdateSettings","alert","onAddAuth","onCheckSync","then","onManualSave","onManualLoad","onUnlink","authData","handleToggleShowProgressBar","handleInputAuthData","handleLinkDataClick","rel","href","handleCheckSync","handleManualSave","handleManualLoad","handleUnlink","handleAboutClick","StatsView","latestHistory","onRemoveHistory","handleChangeView","RecentStats","TotalStats","handleRemoveHistory","IndividualStats","latest","child","sorted","defaultHistory","s","nonDefaultHistory","handleRemove","findIndex","h","getColor","ratio","hue","tableData","backgroundColor","toFixed","App","sessionOptions","updateData","handleStartDefaultSession","handleTemplateAdd","handleTemplateRemove","handleFinishSession","handleUpdateSettings","handleAddAuth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7517358b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross.b5d66db1.svg\";","import React from 'react';\nimport './AppContainer.css';\nimport cross from './cross.svg';\n\ntype AppContainerProps = {\n    title: string,\n    children: React.ReactNode,\n    showExit: boolean,\n    exitPrompt: string | null,\n    onExit: () => void\n}\n\nexport class AppContainer extends React.Component<AppContainerProps> {\n    handleExit() {\n        let exit = true;\n        if (this.props.exitPrompt !== null) {\n            exit = window.confirm(this.props.exitPrompt);\n        }\n        if (exit) {\n            this.props.onExit();\n        }\n    }\n\n    render() {\n        let title = this.props.title;\n        let children = this.props.children;\n        let showExit = this.props.showExit;\n        return <div className=\"AppContainer\">\n            <div className=\"AppContainer-topbar\">\n                <span>{title}</span>\n                {showExit ? (<button onClick={this.handleExit.bind(this)}>\n                    {<img src={cross} alt=\"X\"/>}\n                </button>) : null}\n            </div>\n            <div className=\"AppContainer-container\">\n                {children}\n            </div>\n        </div>;\n    }\n}","import _ from 'lodash';\nimport * as randomJS from 'random-js';\n\nconst rng = new randomJS.Random();\n\nexport const Util = {\n    random(): number {\n        return rng.realZeroToOneExclusive();\n    },\n    randInt(min: number, max?: number): number {\n        if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return Math.floor(Util.random() * (max - min)) + min;\n    },\n    randChoice<T>(arr: T[]): T {\n        return arr[Util.randInt(0, arr.length)];\n    },\n    range(min: number, max: number) {\n        return _.range(min, max + 1);\n    },\n    clone<T>(obj: T): T {\n        return _.cloneDeep(obj);\n    },\n    shuffle<T>(arr: T[]): T[] {\n        arr = arr.slice();\n        for (let i = 0; i < arr.length; i++) {\n            let j = Util.randInt(0, arr.length);\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        return arr;\n    },\n    extend<TSource, TObj>(obj: TSource, prop: TObj): TSource & TObj {\n        return _.extend(obj, prop)\n    },\n    plural(amount: number, text: string) {\n        return amount + \" \" + text + (amount === 1 ? \"\" : \"s\");\n    },\n    formatSeconds(mills: number): string {\n        return Math.round(mills / 100) / 10 + \"s\";\n    },\n    formatDate(time: number, curTime: number = new Date().getTime()): string {\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        const months = [\"January\", \"Februrary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\",\n            \"October\", \"November\", \"December\"\n        ];\n\n        let date = new Date(time);\n        let diff = (curTime - time) / (1000 * 60); // Time difference in minutes\n        let minutesAgo = Math.round(diff);\n        let hoursAgo = Math.round(diff / 60);\n        let daysAgo = Math.round(diff / 60 / 24);\n\n        if (diff < 1 && diff > 0) {\n            return `Just now`;\n        } else if (diff < 60) {\n            return Util.plural(minutesAgo, \"minute\") + \" ago\";\n        } else if (diff < (60 * 24)) {\n            return Util.plural(hoursAgo, \"hour\") + \" ago\";\n        } else if (diff < (60 * 24 * 3)) {\n            return Util.plural(daysAgo, \"day\") + \" ago\";\n        } else if (diff < (60 * 24 * 7)) {\n            return \"Last \" + days[date.getDay()] + \" (\" + Util.plural(daysAgo, \"day\") + \" ago)\";\n        } else {\n            return months[date.getMonth()] + \" \" + date.getDate() + \"(\" + Util.plural(daysAgo, \"day\") + \" ago)\";\n        }\n    },\n    compare(a: any, b: any): boolean {\n        return _.isEqual(a, b);\n    }\n}","import { Util } from \"./Util\";\n\nexport type MathOperator = 'add' | 'sub' | 'mul' | 'div';\n\nexport const MathOperators: MathOperator[] = ['add', 'sub', 'mul', 'div'];\n\nexport type SessionType = MathOperator | 'mix' | 'sqr';\n\nexport const SessionTypes: SessionType[] = ['add', 'sub', 'mul', 'div', 'mix', 'sqr'];\n\nexport const MathOperatorSymbols = {\n    'add': '+',\n    'sub': '−',\n    'mul': '×',\n    'div': '÷'\n}\n\nexport const SessionTypeNames = {\n    'add': 'Addition',\n    'sub': 'Subtraction',\n    'mul': 'Multiplication',\n    'div': 'Division',\n    'mix': 'Mixed',\n    'sqr': 'Squares'\n}\n\nexport type MathQuestion = {\n    num1: number,\n    num2: number,\n    oper: MathOperator,\n    ans: number\n}\n\nexport type MathSession = {\n    timeStarted: number,\n    type: SessionType,\n    questions: MathQuestion[],\n    times: number[],\n    progress: number,\n    total: number,\n    isDefault: boolean,\n}\n\nexport type MathSessionOrder = 'all' | 'all-shuffle' | 'random';\n\nexport type MathSessionOptions = {\n    type: SessionType,\n    // Whether to use range or pool\n    useRange: boolean,\n    pool1?: number[],\n    pool2?: number[],\n    range?: { min: number, max: number },\n\n    // Run all questions, all but shuffled, or a random amount (uses numQuestions)\n    order: MathSessionOrder,\n    numQuestions?: number,\n\n    // Whether or not this is a default session\n    isDefault: boolean\n}\n\nexport type MathSessionTemplate = {\n    options: MathSessionOptions,\n    name: string\n}\n\nexport type MathSessionResults = {\n    date: number,\n    type: SessionType,\n    totalTime: number,\n    numQuestions: number,\n    individual?: MathSessionIndividualResults\n}\n\nexport type MathSessionIndividualResults = {\n    oper: MathOperator,\n    range: { min: number, max: number }\n    times: number[][]\n}\n\nexport const DefaultRange = {\n    min: 1,\n    max: 12\n}\n\nexport const MathFuncs = {\n    generateQuestion(num1: number, num2: number, oper: MathOperator): MathQuestion {\n        if (oper === 'add') {\n            return {\n                num1, num2, oper, ans: num1 + num2\n            }\n        } else if (oper === 'sub') {\n            return {\n                num1: num1 + num2, num2, oper, ans: num1\n            }\n        } else if (oper === 'mul') {\n            return {\n                num1, num2, oper, ans: num1 * num2\n            }\n        } else if (oper === 'div') {\n            return {\n                num1: num1 * num2, num2, oper, ans: num1\n            }\n        }\n        throw Error();\n    },\n    generateQuestionsRandom(type: SessionType, pool1: number[], pool2: number[], numQuestions: number): MathQuestion[] {\n        let num1: number;\n        let num2: number;\n        let oper: MathOperator;\n        let questions: MathQuestion[] = [];\n        for (let i = 0; i < numQuestions; i++) {\n            if (type === \"mix\") {\n                oper = Util.randChoice(MathOperators);\n                num1 = Util.randChoice(pool1);\n                num2 = Util.randChoice(pool2);\n            } else if (type === \"sqr\") {\n                oper = 'mul';\n                num1 = Util.randChoice(pool1);\n                num2 = num1;\n            } else {\n                oper = type;\n                num1 = Util.randChoice(pool1);\n                num2 = Util.randChoice(pool2);\n            }\n            let question = MathFuncs.generateQuestion(num1, num2, oper);\n            questions.push(question);\n        }\n        return questions;\n    },\n    generateQuestionsOrdered(type: SessionType, pool1: number[], pool2: number[]): MathQuestion[] {\n        let num1: number;\n        let num2: number;\n        let oper: MathOperator;\n        let questions: MathQuestion[] = [];\n        for (let i = 0; i < pool1.length; i++) {\n            for (let j = 0; j < pool2.length; j++) {\n                if (type === \"mix\") {\n                    oper = Util.randChoice(MathOperators);\n                    num1 = pool1[i];\n                    num2 = pool2[j];\n                } else if (type === \"sqr\") {\n                    oper = \"mul\";\n                    num1 = pool1[i];\n                    num2 = pool2[j];\n                    if (num1 !== num2) {\n                        continue;\n                    }\n                } else {\n                    oper = type;\n                    num1 = pool1[i];\n                    num2 = pool2[j];\n                }\n                let question = MathFuncs.generateQuestion(num1, num2, oper);\n                questions.push(question);\n            }\n        }\n        return questions;\n    },\n    generateSession(options: MathSessionOptions): MathSession {\n        let type = options.type;\n        let questions: MathQuestion[] = [];\n        let timeStarted = 0;\n        let times: number[] = [];\n        let progress = 0;\n        let total: number;\n        let isDefault = options.isDefault;\n\n        let pool1: number[];\n        let pool2: number[]\n        if (options.useRange) {\n            pool1 = Util.range(options.range!.min, options.range!.max)\n            pool2 = Util.range(options.range!.min, options.range!.max);\n        } else {\n            pool1 = Util.clone(options.pool1!);\n            pool2 = Util.clone(options.pool2 ?? options.pool1!);\n        }\n\n        // Generate Questions\n        if (options.order === \"random\") {\n            questions = MathFuncs.generateQuestionsRandom(type, pool1, pool2, options.numQuestions!);\n        } else if (options.order === \"all\") {\n            questions = MathFuncs.generateQuestionsOrdered(type, pool1, pool2);\n        } else if (options.order === \"all-shuffle\") {\n            questions = MathFuncs.generateQuestionsOrdered(type, pool1, pool2);\n            questions = Util.shuffle(questions);\n        }\n        total = questions.length;\n\n        return {\n            timeStarted,\n            type,\n            questions,\n            times,\n            progress,\n            total,\n            isDefault\n        }\n    },\n    generateDefaultSessionOptions(type: SessionType): MathSessionOptions {\n        let useRange = true;\n        let range = Util.clone(DefaultRange);\n        let order: \"all-shuffle\" = \"all-shuffle\";\n        return {\n            type,\n            useRange,\n            range,\n            order,\n            isDefault: true\n        };\n    },\n    generateSessionResults(session: MathSession): MathSessionResults {\n        let date = session.timeStarted;\n        let type = session.type;\n        let totalTime = session.times.reduce((a, t) => a + t, 0)\n        let individual = MathFuncs.generateSessionIndividualResults(session);\n        let numQuestions = session.total;\n        return {\n            date,\n            type,\n            totalTime,\n            numQuestions,\n            individual\n        };\n    },\n    generateSessionIndividualResults(session: MathSession): MathSessionIndividualResults | undefined {\n        // Only default math sessions where the session type is a math operator\n        // are allowed\n        if (!session.isDefault || !MathOperators.includes(session.type as MathOperator)) {\n            return;\n        }\n        let oper = session.type as MathOperator;\n        let range = Util.clone(DefaultRange);\n        let times: number[][] = [];\n        for (let i = range.min; i <= range.max; i++) {\n            let arr: number[] = []\n            for (let j = range.min; j <= range.max; j++) {\n                arr.push(0);\n            }\n            times.push(arr);\n        }\n        for (let i = 0; i < session.questions.length; i++) {\n            let question = session.questions[i];\n            let time = session.times[i];\n            let num1: number, num2: number;\n            if (['sub', 'div'].includes(question.oper)) {\n                num1 = question.ans;\n                num2 = question.num2;\n            } else {\n                num1 = question.num1;\n                num2 = question.num2;\n            }\n            let index1 = num1 - range.min;\n            let index2 = num2 - range.min;\n            times[index1][index2] = time;\n        }\n\n        return {\n            oper,\n            range,\n            times\n        };\n    },\n    startSession(session: MathSession): MathSession {\n        session.timeStarted = new Date().getTime();\n        return session;\n    }\n}","import { SessionType, MathSessionResults, MathQuestion, MathOperator, MathFuncs, DefaultRange } from \"./Math\";\n\ntype QuestionTime = {\n    question: MathQuestion\n    time: number\n}\n\nexport const StatFuncs = {\n    filterType(history: MathSessionResults[], type: SessionType): MathSessionResults[] {\n        return history.filter(v => v.type === type);\n    },\n    getLatestDefault(history: MathSessionResults[], type: SessionType): MathSessionResults | null {\n        for (let i = history.length - 1; i >= 0; i--) {\n            if (history[i].type === type) {\n                return history[i];\n            }\n        }\n        return null;\n    },\n    getHistorySorted(history: MathSessionResults[]): MathSessionResults[] {\n        return history.slice().sort((h1, h2) => h1.date - h2.date);\n    },\n    getFastest(result: MathSessionResults, amount: number): QuestionTime[] {\n        let individual = result.individual!;\n        let fastest: QuestionTime[] = [];\n        // Loop over each time\n        for (let i = 0; i < individual.times.length; i++) {\n            for (let j = 0; j < individual.times.length; j++) {\n                let time = individual.times[i][j];\n                // Add if it is faster than the slowest in the list\n                if (fastest.length < amount || fastest[fastest.length - 1].time > time) {\n                    fastest.push({\n                        question:\n                            MathFuncs.generateQuestion(i + individual.range.min,\n                                j + individual.range.min, result.type as MathOperator),\n                        time: time\n                    });\n                    fastest.sort((a, b) => a.time - b.time);\n                    fastest.splice(amount);\n                }\n            }\n        }\n        return fastest;\n    },\n    getSlowest(result: MathSessionResults, amount: number): QuestionTime[] {\n        let individual = result.individual!;\n        let slowest: QuestionTime[] = [];\n        for (let i = 0; i < individual.times.length; i++) {\n            for (let j = 0; j < individual.times.length; j++) {\n                let time = individual.times[i][j];\n                if (slowest.length < amount || slowest[slowest.length - 1].time < time) {\n                    slowest.push({\n                        question:\n                            MathFuncs.generateQuestion(i + individual.range.min,\n                                j + individual.range.min, result.type as MathOperator),\n                        time: time\n                    });\n                    slowest.sort((a, b) => b.time - a.time);\n                    slowest.splice(amount);\n                }\n            }\n        }\n        return slowest;\n    },\n    getIndividualAverage(history: MathSessionResults[], type: SessionType,\n        num1: number, num2: number, amount: number): number | null {\n\n        let filtered = StatFuncs.filterType(history, type);\n        let count = 0;\n        let sum = 0;\n        for (const res of filtered) {\n            if (res.individual !== undefined) {\n                count += 1;\n                sum += res.individual.times[num1 - DefaultRange.min][num2 - DefaultRange.min];\n            }\n        }\n\n        if (count === 0) {\n            return null;\n        } else {\n            return sum / count;\n        }\n    }\n}","import React from 'react';\nimport { SessionType, SessionTypes, SessionTypeNames, MathSessionResults } from '../model/Math';\nimport './HomeView.css';\nimport { StatFuncs } from '../model/Stats';\n\ntype HomeViewProps = {\n    history: MathSessionResults[],\n    onStartPractice: (type: SessionType) => void,\n    onNavigateSelectSession: () => void,\n    onNavigateStats: () => void,\n    onNavigateSettings: () => void\n}\n\ntype HomeViewState = {\n    sessionType: SessionType,\n}\n\nexport class HomeView extends React.Component<HomeViewProps, HomeViewState> {\n    constructor(props: HomeViewProps) {\n        super(props);\n        let history = StatFuncs.getHistorySorted(props.history);\n        let type: SessionType;\n        if (history.length === 0) {\n            type = \"add\"\n        } else {\n            type = history[history.length - 1].type;\n        }\n        this.state = {\n            sessionType: type\n        }\n    }\n\n    handleStartClick() {\n        this.props.onStartPractice(this.state.sessionType);\n    }\n\n    handleNavigate(view: 'select' | 'stats' | 'settings') {\n        if (view === 'select') {\n            this.props.onNavigateSelectSession();\n        } else if (view === 'stats') {\n            this.props.onNavigateStats();\n        } else {\n            this.props.onNavigateSettings();\n        }\n    }\n\n    handleSelectType(e: React.ChangeEvent) {\n        let sessionType = (e.target as HTMLSelectElement).value as SessionType;\n        this.setState({\n            sessionType\n        })\n    }\n\n    render() {\n        let sessionType = this.state.sessionType;\n        return (\n            <div className=\"Home\">\n                <button className=\"Home-start\" onClick={this.handleStartClick.bind(this)}>Start<br />Practice</button>\n                <select className=\"Home-start-type\" value={sessionType} onChange={this.handleSelectType.bind(this)}>\n                    {\n                        SessionTypes.map(t => <option value={t} key={t}>\n                            {SessionTypeNames[t]}\n                        </option>)\n                    }\n                </select>\n                <span className=\"link\" onClick={() => this.handleNavigate('select')}>\n                    Custom Session\n                </span>\n                <span className=\"link\" onClick={() => this.handleNavigate('stats')}>\n                    User Stats\n                </span>\n                <span className=\"link\" onClick={() => this.handleNavigate('settings')}>\n                    Settings\n                </span>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { MathSessionTemplate, MathSessionOptions, SessionType, SessionTypes, SessionTypeNames } from '../model/Math';\nimport { Util } from '../model/Util';\nimport './SelectView.css';\nimport cross from './cross.svg';\n\ntype RangeControlType = \"range\" | \"pool\";\n\nconst RangeControlTypes: RangeControlType[] = [\"range\", \"pool\"];\n\nconst RangeControlTypeNames = {\n    \"range\": \"Range\",\n    \"pool\": \"Pool\"\n}\n\ntype SelectViewProps = {\n    sessionTemplates: MathSessionTemplate[],\n    onStartSession: (options: MathSessionOptions) => void,\n    onAddSessionTemplate: (template: MathSessionTemplate) => void,\n    onRemoveSessionTemplate: (index: number) => void,\n}\n\ntype SelectViewState = {\n    rangeType: RangeControlType,\n    range: { min: number, max: number },\n    pool1: number[],\n    pool2: number[],\n    type: SessionType,\n    shuffle: boolean,\n    random: boolean,\n    numberQuestions: number\n}\n\nexport class SelectView extends React.Component<SelectViewProps, SelectViewState> {\n    constructor(props: SelectViewProps) {\n        super(props);\n        this.state = {\n            rangeType: \"range\",\n            range: { min: 1, max: 12 },\n            pool1: Util.range(1, 12),\n            pool2: Util.range(1, 12),\n            type: \"add\",\n            shuffle: true,\n            random: false,\n            numberQuestions: 20\n        }\n    }\n\n    handleStartSession() {\n        this.props.onStartSession({\n            type: this.state.type,\n            useRange: this.state.rangeType === \"range\",\n            range: this.state.range,\n            pool1: this.state.pool1,\n            pool2: this.state.pool2,\n            order: this.state.random ? \"random\" :\n                this.state.shuffle ? \"all-shuffle\" : \"all\",\n            numQuestions: this.state.numberQuestions,\n            isDefault: false\n        });\n    }\n\n    handleStartSessionTemplate(index: number) {\n        let template = this.props.sessionTemplates[index];\n        this.props.onStartSession(template.options);\n    }\n\n    handleSaveTemplate() {\n        let options: MathSessionOptions = {\n            type: this.state.type,\n            useRange: this.state.rangeType === \"range\",\n            range: this.state.range,\n            pool1: this.state.pool1,\n            pool2: this.state.pool2,\n            order: this.state.random ? \"random\" :\n                this.state.shuffle ? \"all-shuffle\" : \"all\",\n            numQuestions: this.state.numberQuestions,\n            isDefault: false\n        }\n        let name = window.prompt(\"Please enter a name for your session:\");\n        if (name === null) {\n            return;\n        }\n        this.props.onAddSessionTemplate({\n            options,\n            name\n        })\n    }\n\n    handleRemoveTemplate(index: number) {\n        this.props.onRemoveSessionTemplate(index);\n    }\n\n    handleSelectRangeType(e: React.ChangeEvent) {\n        let rangeType = (e.target as HTMLSelectElement).value as RangeControlType;\n        this.setState({ rangeType });\n    }\n\n    handleInputRangeAmount(e: React.ChangeEvent, min: boolean) {\n        let value = parseInt((e.target as HTMLInputElement).value, 10);\n        if (value < 0) {\n            value = 1;\n        }\n        let range = Util.clone(this.state.range);\n        if (min) {\n            range.min = value;\n        } else {\n            range.max = value;\n        }\n        this.setState({\n            range\n        });\n    }\n\n    handleValidateRangeAmount(e: React.ChangeEvent, min: boolean) {\n        let value = parseInt((e.target as HTMLInputElement).value, 10);\n        if (Number.isNaN(value)) {\n            value = NaN\n        }\n        value = Math.min(Math.max(value, 1), 1000);\n        let range = Util.clone(this.state.range);\n        if (min) {\n            range.min = value;\n            if (range.max < range.min) {\n                range.max = range.min;\n            }\n        } else {\n            range.max = value;\n            if (range.min > range.max) {\n                range.min = range.max\n            }\n        }\n        this.setState({\n            range\n        });\n    }\n\n    handleToggleRangePool(isPool1: boolean, num: number) {\n        let pool = isPool1 ? this.state.pool1 : this.state.pool2;\n        let index = pool.indexOf(num);\n        if (index === -1) {\n            pool.push(num);\n        } else {\n            pool.splice(index, 1);\n        }\n\n        if (isPool1) {\n            this.setState({\n                pool1: pool\n            });\n        } else {\n            this.setState({\n                pool2: pool\n            });\n        }\n    }\n\n    handleSelectType(e: React.ChangeEvent) {\n        let type = (e.target as HTMLSelectElement).value as SessionType;\n        this.setState({ type });\n    }\n\n    handleToggleShuffle() {\n        this.setState({\n            shuffle: !this.state.shuffle\n        });\n    }\n\n    handleToggleRandom() {\n        this.setState({\n            random: !this.state.random\n        });\n    }\n\n    handleSelectNumberQuestions(numberQuestions: number) {\n        this.setState({\n            numberQuestions\n        });\n    }\n\n    render() {\n        let templates = this.props.sessionTemplates;\n        let rangeType = this.state.rangeType;\n        let range = this.state.range;\n        let pool1 = this.state.pool1;\n        let pool2 = this.state.pool2;\n        let type = this.state.type;\n        let random = this.state.random;\n        let shuffle = this.state.shuffle;\n        let numberQuestions = this.state.numberQuestions;\n\n        let rangeControls: React.ReactNode;\n        if (rangeType === \"range\") {\n            rangeControls = <div className=\"Select-range-range\">\n                <input type=\"number\" pattern=\"[0-9]*\"\n                    min={1}\n                    value={Number.isNaN(range.min) ? \"\" : range.min}\n                    onChange={e => this.handleInputRangeAmount(e, true)}\n                    onBlur={e => this.handleValidateRangeAmount(e, true)} />\n                <input type=\"number\" pattern=\"[0-9]*\"\n                    min={1}\n                    value={Number.isNaN(range.max) ? \"\" : range.max}\n                    onChange={e => this.handleInputRangeAmount(e, false)}\n                    onBlur={e => this.handleValidateRangeAmount(e, false)} />\n            </div>\n        } else if (rangeType === \"pool\") {\n            rangeControls = [\n                <RangePool\n                    key={1}\n                    pool={pool1}\n                    onToggleNum={n => this.handleToggleRangePool(true, n)} />,\n                <RangePool\n                    key={2}\n                    pool={pool2}\n                    onToggleNum={n => this.handleToggleRangePool(false, n)} />,\n            ]\n        }\n\n        let orderControls: React.ReactNode;\n        if (random) {\n            orderControls = <div className=\"Select-order-random\">\n                {\n                    [20, 50, 100].map(n => [\n                        <input type=\"radio\" value={n}\n                            checked={n === numberQuestions}\n                            onChange={() => this.handleSelectNumberQuestions(n)} />,\n                        <label\n                            onClick={() => this.handleSelectNumberQuestions(n)}>{n} Questions</label>,\n                        <br />\n                    ])\n                }\n            </div>\n        } else {\n            orderControls = <div className=\"Select-order-shuffle\">\n                <input type=\"checkbox\" checked={shuffle}\n                    onChange={this.handleToggleShuffle.bind(this)} />\n                <label\n                    onClick={this.handleToggleShuffle.bind(this)}>Shuffle?</label>\n            </div>\n        }\n\n        return (\n            <div className=\"Select\">\n                <div className=\"Select-templates\">\n                    {\n                        templates.map((t, i) =>\n                            <SessionTemplate\n                                name={t.name}\n                                key={t.name}\n                                onStart={() => this.handleStartSessionTemplate(i)}\n                                onRemove={() => this.handleRemoveTemplate(i)}\n                            />\n                        )\n                    }\n                </div>\n                <div className=\"Select-options\">\n                    <div className=\"Select-rangetype\">\n                        <select value={rangeType} onChange={this.handleSelectRangeType.bind(this)}>\n                            {\n                                RangeControlTypes.map(t =>\n                                    <option key={t} value={t}>{RangeControlTypeNames[t]}</option>)\n                            }\n                        </select>\n                    </div>\n                    {rangeControls}\n                    <div className=\"Select-type\">\n                        <span>Type: </span>\n                        <select value={type} onChange={this.handleSelectType.bind(this)}>\n                            {\n                                SessionTypes.map(t =>\n                                    <option key={t} value={t}>{SessionTypeNames[t]}</option>)\n                            }\n                        </select>\n                    </div>\n                    <div className=\"Select-order\">\n                        <input type=\"checkbox\" checked={random}\n                            onChange={this.handleToggleRandom.bind(this)} />\n                        <label onClick={this.handleToggleRandom.bind(this)}>\n                            Random?\n                        </label>\n                    </div>\n                    {orderControls}\n                    <div className=\"Select-submit\">\n                        <button onClick={this.handleStartSession.bind(this)}>Start Practice</button>\n                        <span className=\"link\" onClick={this.handleSaveTemplate.bind(this)}>Save Settings</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype SessionTemplateProps = {\n    name: string,\n    onStart: () => void,\n    onRemove: () => void\n}\n\nexport function SessionTemplate(props: SessionTemplateProps) {\n    function remove() {\n        if (!window.confirm(\"Are you sure you want to remove this template?\")) {\n            return;\n        }\n        props.onRemove();\n    }\n\n    return (<div className=\"SessionTemplate\">\n        <button className=\"SessionTemplate-start\" onClick={props.onStart}>Start</button>\n        <span className=\"SessionTemplate-name\">{props.name}</span>\n        <button className=\"SessionTemplate-remove\" onClick={remove}>\n            <img src={cross} alt=\"X\" />\n        </button>\n    </div>);\n}\n\ntype RangePoolProps = {\n    onToggleNum: (num: number) => void\n    pool: number[]\n}\n\nexport function RangePool(props: RangePoolProps) {\n    let { pool, onToggleNum } = props;\n    return (<div className=\"RangePool\">{\n        Util.range(1, 20).map(i =>\n            <button key={i}\n                className={\"RangePool-button \" +\n                    (pool.includes(i) ? \"RangePool-selected\" : \"\")}\n                onClick={() => onToggleNum(i)}>\n                {i}\n            </button>)\n    }</div>);\n}","import { MathSessionTemplate, MathSessionResults } from \"./Math\";\nimport Gists from \"gists\";\n\nexport const version = \"v3.0.0-beta\";\nconst filename = \"mrsiliconguy-mental-math-practice-save.json\";\n\nexport type Settings = {\n    showProgressBar: boolean\n}\n\nconst defaultSettings: Settings = {\n    showProgressBar: false\n}\n\nexport type Data = {\n    version: string,\n    history: MathSessionResults[],\n    templates: MathSessionTemplate[],\n    settings: Settings\n}\n\nexport const DefaultData: Data = {\n    version,\n    history: [],\n    templates: [],\n    settings: defaultSettings\n}\n\nexport type AuthData = {\n    token: string,\n    username: string,\n    gist: string,\n    lastSynced: number\n}\n\nexport const StorageFuncs = {\n    verifyData(obj: any): obj is Data {\n        return (typeof obj === \"object\") &&\n            (obj.version !== undefined) &&\n            (obj.version === version) &&\n            (obj.history !== undefined) &&\n            (Array.isArray(obj.history)) &&\n            (obj.templates !== undefined) &&\n            (Array.isArray(obj.templates)) &&\n            (obj.settings !== undefined) &&\n            (typeof obj.settings === \"object\");\n    },\n    serialize(data: Data): string {\n        let json = JSON.stringify(data);\n\n        return json;\n    },\n    deserialize(text: string): Data {\n        let data: any\n        try {\n            let json = JSON.parse(text);\n            data = json;\n        } catch {\n            throw Error(\"Could not parse data\");\n        }\n        if (this.verifyData(data)) {\n            return data;\n        } else {\n            throw Error(\"Invalid data\");\n        }\n    },\n    async load(auth: AuthData): Promise<Data | null> {\n        try {\n            if (auth === null) {\n                return null;\n            }\n            let gitAcc = new Gists({ token: auth.token });\n            let message = await gitAcc.get(auth.gist);\n            let text = message.body.files[filename].content;\n            let data = StorageFuncs.deserialize(text);\n            if (StorageFuncs.verifyData(data)) {\n                await StorageFuncs.updateLastSynced(new Date());\n                return data;\n            } else {\n                return null;\n            }\n        } catch {\n            return null;\n        }\n    },\n    async save(auth: AuthData, data: Data): Promise<boolean> {\n        try {\n            let text = StorageFuncs.serialize(data);\n            let gitAcc = new Gists({ token: auth.token });\n            await gitAcc.edit(auth.gist, {\n                files: {\n                    [filename]: {\n                        content: text\n                    }\n                }\n            });\n            await StorageFuncs.updateLastSynced(new Date());\n            return true;\n        } catch {\n            console.log(\"Error saving data\");\n            return false;\n        }\n    },\n    verifyAuth(obj: any): obj is AuthData {\n        return (typeof obj === \"object\") &&\n            (obj.token !== undefined) &&\n            (typeof obj.token === \"string\") &&\n            (obj.username !== undefined) &&\n            (typeof obj.username === \"string\") &&\n            (obj.gist !== undefined) &&\n            (typeof obj.gist === \"string\");\n    },\n    loadAuth(): AuthData | null {\n        let text = window.localStorage.getItem(version);\n        if (text === null) {\n            return null;\n        } else {\n            try {\n                let auth = JSON.parse(text);\n                if (StorageFuncs.verifyAuth(auth)) {\n                    return auth;\n                } else {\n                    return null;\n                }\n            } catch {\n                return null;\n            }\n        }\n    },\n    async saveAuth(token: string): Promise<AuthData | null> {\n        try {\n            let gitAcc = new Gists({ token });\n            // Search gists before 2020\n            let date = \"2020-01-01T00:00:00Z\";\n            let gists: any[] = [];\n            let fetchPages = (await gitAcc.all(date)).pages;\n            fetchPages.forEach((page: any) => gists = gists.concat(page.body));\n            let gist = \"\";\n            let username = \"\";\n            for (let i = 0; i < gists.length; i++) {\n                let files = Object.keys(gists[i].files);\n                if (files.includes(filename)) {\n                    gist = gists[i].id;\n                    username = gists[i].owner.login;\n                    break;\n                }\n            }\n            if (gist === \"\") {\n                let createGistRes = await gitAcc.create({\n                    description: \"Mental Math Practice save data (https://mrsiliconguy.github.io/math-practice/)\",\n                    public: false,\n                    files: {\n                        [filename]: {\n                            content: \"Save data will be uploaded here\"\n                        }\n                    }\n                });\n                gist = createGistRes.id;\n                username = createGistRes.owner.login;\n            }\n            let auth = {\n                token, gist, username, lastSynced: -1\n            };\n            let text = JSON.stringify(auth);\n            window.localStorage.setItem(version, text);\n            return auth;\n        } catch (e) {\n            console.log(e);\n            console.log(\"Error saving auth\");\n            return null;\n        }\n    },\n    async updateLastSynced(date: Date) {\n        let auth = StorageFuncs.loadAuth();\n        if (auth !== null) {\n            auth!.lastSynced = date.getTime();\n            let text = JSON.stringify(auth);\n            window.localStorage.setItem(version, text);\n        }\n    },\n    async clearAuth() {\n        window.localStorage.removeItem(version);\n    }\n}","import React from 'react';\nimport { MathSession, MathFuncs, MathSessionOptions, MathOperatorSymbols, MathSessionResults } from '../model/Math';\nimport { Settings } from '../model/Storage';\nimport './MathView.css';\n\ntype MathViewProps = {\n    options: MathSessionOptions,\n    settings: Settings,\n    onFinishSession: (results: MathSessionResults) => void\n}\n\ntype MathViewState = {\n    input: number | null,\n    session: MathSession\n}\n\n\nexport class MathView extends React.Component<MathViewProps, MathViewState> {\n    constructor(props: MathViewProps) {\n        super(props);\n        let session = MathFuncs.generateSession(props.options);\n        MathFuncs.startSession(session);\n        this.state = {\n            session,\n            input: null\n        }\n    }\n\n    handleInput(e: React.FormEvent) {\n        // Skip if already finished somehow\n        if (this.state.session.progress === this.state.session.total) {\n            return;\n        }\n\n        let value = (e.target as HTMLInputElement).value as string;\n        let num = parseInt(value, 10);\n\n        let input = this.state.input;\n        input = Number.isNaN(num) ? null : num;\n\n        this.setState({ input }, () => setTimeout(() => {\n            let session = this.state.session;\n            // Skip if already finished somehow\n            if (this.state.session.progress === this.state.session.total) {\n                return;\n            }\n\n            if (input === session.questions[session.progress].ans) {\n                let input = null;\n                let startTime = session.timeStarted;\n                let totalTime = session.times.reduce((v, t) => v + t, 0);\n                let currentTime = new Date().getTime()\n                let elapsedTime = currentTime - startTime - totalTime;\n                // Cap at 9.9s per question\n                elapsedTime = Math.min(elapsedTime, 9900);\n                session.times.push(elapsedTime);\n                session.progress += 1;\n                if (session.progress === session.total) {\n                    let results = MathFuncs.generateSessionResults(session);\n                    this.props.onFinishSession(results)\n                } else {\n                    this.setState({\n                        session,\n                        input\n                    });\n                }\n            }\n        }, 100));\n    }\n\n    render() {\n        let settings = this.props.settings;\n        let input = this.state.input;\n        let session = this.state.session;\n        let curQuestion = session.questions[session.progress];\n\n        return (\n            <div className=\"Math\">\n                <div className=\"Math-session\">\n                    <div className=\"Math-question\">\n                        <span className=\"Math-oper\">{MathOperatorSymbols[curQuestion.oper]}</span>\n                        <div className=\"Math-numbers\">\n                            <span>{curQuestion.num1}</span>\n                            <span>{curQuestion.num2}</span>\n                        </div>\n                    </div>\n                    <div className=\"Math-answer\">\n                        <input\n                            autoFocus={true}\n                            placeholder=\"?\"\n                            maxLength={3}\n                            size={3}\n                            value={input ?? \"\"}\n                            onChange={this.handleInput.bind(this)}\n                            type=\"number\" />\n                    </div>\n                </div>\n                {\n                    settings.showProgressBar ?\n                        <div className=\"Math-progress\">\n                            <div style={{ width: (session.progress / session.total * 100) + \"%\" }}></div>\n                        </div> : null\n                }\n            </div>\n        );\n    }\n}","import React, { ChangeEvent } from 'react';\nimport { Settings, Data, AuthData } from '../model/Storage';\nimport './SettingsView.css'\nimport { Util } from '../model/Util';\n\ntype SettingsViewProps = {\n    authData: AuthData | null,\n    data: Data,\n    settings: Settings,\n    onUpdateSettings: (settings: Settings) => void,\n    onAddAuth: (token: string) => void,\n    onCheckSync: () => Promise<boolean>,\n    onManualSave: () => Promise<boolean>,\n    onManualLoad: () => Promise<boolean>,\n    onUnlink: () => Promise<boolean>,\n}\n\ntype SettingsViewState = {\n    token: string,\n}\n\nexport class SettingsView extends React.Component<SettingsViewProps, SettingsViewState> {\n    constructor(props: SettingsViewProps) {\n        super(props);\n        this.state = {\n            token: \"\",\n        };\n    }\n\n    handleToggleShowProgressBar() {\n        let settings = this.props.settings;\n        settings.showProgressBar = !settings.showProgressBar;\n        this.props.onUpdateSettings(settings);\n    }\n\n    handleInputAuthData(e: ChangeEvent) {\n        let value = (e.target as HTMLInputElement).value;\n        this.setState({\n            token: value\n        });\n    }\n\n    handleLinkDataClick() {\n        if (this.state.token === \"\") {\n            alert(\"Please enter a token\");\n        } else {\n            this.props.onAddAuth(this.state.token);\n        }\n    }\n\n    handleCheckSync() {\n        this.props.onCheckSync().then(res => {\n            if (res === true) {\n                alert(\"Data is up to date with gist\");\n            } else {\n                alert(\"Data is not synced with gist! Try manually saving\");\n            }\n        })\n    }\n\n    handleManualSave() {\n        this.props.onManualSave().then(res => {\n            if (res === true) {\n                alert(\"Successfully saved to gist\");\n            } else {\n                alert(\"Error saving to gist!\");\n            }\n        })\n    }\n\n    handleManualLoad() {\n        this.props.onManualLoad().then(res => {\n            if (res === true) {\n                alert(\"Successfully loaded from gist\");\n            } else {\n                alert(\"Error loaindg from gist!\");\n            }\n        })\n    }\n\n    async handleUnlink() {\n        if (!window.confirm(\"Are you sure you want to unlink?\")) {\n            return;\n        }\n        if (await this.props.onUnlink()) {\n            alert(\"Unlinked data from Github\");\n        } else {\n            alert(\"Unable to unlink for some reason\");\n        }\n    }\n\n    handleAboutClick() {\n        alert(\"Math Practice was coded by MrSiliconGuy\\nwith the React.js framework\");\n    }\n\n    render() {\n        let settings = this.props.settings;\n        let state = this.state;\n        let authData = this.props.authData;\n        return <div className=\"Settings\">\n            <fieldset className=\"Settings-fieldset\">\n                <legend>Math Session</legend>\n                <input\n                    type=\"checkbox\"\n                    checked={settings.showProgressBar}\n                    onChange={this.handleToggleShowProgressBar.bind(this)} />\n                <label onClick={this.handleToggleShowProgressBar.bind(this)}>Show Progress Bar</label>\n            </fieldset>\n            <fieldset className=\"Settings-fieldset\">\n                <legend>Github Gist Linking</legend>\n                {\n                    authData === null ?\n                        (\n                            <div>\n                                <span>Data not yet linked</span><br />\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Github Token\"\n                                    value={state.token}\n                                    onChange={(e) => this.handleInputAuthData(e)}\n                                /><br />\n                                <button onClick={this.handleLinkDataClick.bind(this)}>Link Data</button>\n                                <span className=\"link\">help</span>\n                            </div>\n                        ) : (\n                            <div>\n                                <span>Data linked with\n                                    <a\n                                        className=\"link\"\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href={`https://gist.github.com/${authData.username}/${authData.gist}`}>\n                                        {authData.username}\n                                    </a>\n                                    on Github\n                                </span><br />\n                                <span>Last synced: {authData.lastSynced === -1 ? \"Never\" : Util.formatDate(authData.lastSynced)}</span><br />\n                                <span className=\"link\" onClick={this.handleCheckSync.bind(this)}>Check Sync</span>\n                                <span className=\"link\" onClick={this.handleManualSave.bind(this)}>Save</span>\n                                <span className=\"link\" onClick={this.handleManualLoad.bind(this)}>Load</span>\n                                <span className=\"link\" onClick={this.handleUnlink.bind(this)}>Unlink</span>\n                            </div>\n                        )\n                }\n            </fieldset>\n            <fieldset className=\"Settings-fieldset\">\n                <legend>Other</legend>\n                <span\n                    className=\"link\"\n                    onClick={this.handleAboutClick.bind(this)}>About</span>\n                <a\n                    className=\"link\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://www.github.com/mrsiliconguy/math-practice\">GitHub</a>\n            </fieldset>\n        </div>\n    }\n}","import React from 'react';\nimport { SessionType, MathSessionResults, SessionTypes, SessionTypeNames, MathOperatorSymbols, DefaultRange, MathOperator, MathOperators } from '../model/Math';\nimport { StatFuncs } from '../model/Stats';\nimport { Util } from '../model/Util';\nimport cross from './cross.svg';\nimport './StatsView.css';\n\ntype StatsViewProps = {\n    history: MathSessionResults[],\n    onRemoveHistory: (index: number) => void\n}\n\ntype StatsViewState = {\n    view: SessionType\n}\n\nexport class StatsView extends React.Component<StatsViewProps, StatsViewState> {\n    constructor(props: StatsViewProps) {\n        super(props);\n        let latestHistory = StatFuncs.getHistorySorted(props.history)[props.history.length - 1];\n        this.state = {\n            view: latestHistory === undefined ? 'add' : latestHistory.type\n        };\n    }\n\n    handleChangeView(e: React.ChangeEvent) {\n        let view = (e.target as HTMLSelectElement).value as SessionType;\n        this.setState({\n            view\n        });\n    }\n\n    handleRemoveHistory(index: number) {\n        this.props.onRemoveHistory(index);\n    }\n\n    render() {\n        let view = this.state.view;\n        let history = this.props.history;\n        return (\n            <div className=\"StatsView\">\n                <select value={view} onChange={this.handleChangeView.bind(this)}>\n                    {\n                        SessionTypes.map(t =>\n                            <option key={t} value={t}>{SessionTypeNames[t]}</option>)\n                    }\n                </select>\n                <span>{SessionTypeNames[view]} Attempts: {StatFuncs.filterType(history, view).length}</span>\n                <span>Total Attempts: {history.length}</span>\n                <div className=\"StatsView-tables\">\n                    <RecentStats {...this.state} {...this.props} />\n                    <TotalStats {...this.state} {...this.props} onRemoveHistory={this.handleRemoveHistory.bind(this)} />\n                    {\n                        MathOperators.includes(view as MathOperator) ? (\n                            <IndividualStats {...this.state} {...this.props} />\n                        ) : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\ntype RecentStatsProps = {\n    view: SessionType,\n    history: MathSessionResults[],\n}\n\nexport function RecentStats(props: RecentStatsProps) {\n    let history = props.history;\n    let latest = StatFuncs.getLatestDefault(history, props.view);\n\n    let child = (latest === null || latest.individual === undefined) ? null : (\n        <tr>\n            <td>\n                <b>Fastest Times:</b>\n                <ul>\n                    {\n                        StatFuncs.getFastest(latest, 5).map((v, i) =>\n                            <li key={i}>\n                                {v.question.num1 + MathOperatorSymbols[v.question.oper] + v.question.num2 +\n                                    \" - \" + Util.formatSeconds(v.time)}\n                            </li>)\n                    }\n                </ul>\n            </td>\n            <td>\n                <b>Slowest Times:</b>\n                <ul>\n                    {\n                        StatFuncs.getSlowest(latest, 5).map((v, i) =>\n                            <li key={i}>\n                                {v.question.num1 + MathOperatorSymbols[v.question.oper] + v.question.num2 +\n                                    \" - \" + Util.formatSeconds(v.time)}\n                            </li>)\n                    }\n                </ul>\n            </td>\n        </tr>);\n    return (<table className=\"RecentStats\">\n        <caption>Latest Session:</caption>\n        <thead>\n            <tr>\n                <th>Date</th>\n                <th>Time</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>{latest === null ? \"None\" :\n                    Util.formatDate(latest.date)}</td>\n                <td>{latest === null ? \"None\" :\n                    Util.formatSeconds(latest.totalTime)}</td>\n            </tr>\n            {child}\n        </tbody>\n    </table>);\n}\n\n\ntype TotalStatsProps = {\n    view: SessionType,\n    history: MathSessionResults[],\n    onRemoveHistory: (index: number) => void\n}\n\n\nexport function TotalStats(props: TotalStatsProps) {\n    let history = props.history;\n    let sorted = StatFuncs.getHistorySorted(history);\n    let filtered = StatFuncs.filterType(sorted, props.view);\n    let defaultHistory = filtered.filter(s => s.individual !== undefined);\n    let nonDefaultHistory = filtered.filter(s => s.individual === undefined);\n\n    function handleRemove(date: number) {\n        if (!window.confirm(\"Are you sure you want to remove this session?\")) {\n            return;\n        }\n        props.onRemoveHistory(history.findIndex(h => h.date === date));\n    }\n\n    return (<table className=\"TotalStats\">\n        <caption>All Sessions</caption>\n        <thead>\n            <tr>\n                <th>&nbsp;</th>\n                <th>Date</th>\n                <th>Time</th>\n                <th>Questions</th>\n                <th>&nbsp;</th>\n            </tr>\n        </thead>\n        <tbody>\n            {\n                defaultHistory.map((t, i) =>\n                    <tr key={i}>\n                        <td>{i + 1})</td>\n                        <td>{Util.formatDate(t.date)}</td>\n                        <td>{Util.formatSeconds(t.totalTime)}</td>\n                        <td>{t.individual !== undefined ? \"default\" : t.numQuestions}</td>\n                        <td>\n                            <button onClick={() => handleRemove(t.date)}>\n                                <img src={cross} alt=\"X\" />\n                            </button>\n                        </td>\n                    </tr>)\n            }\n            {\n                nonDefaultHistory.map((t, i) =>\n                    <tr key={i}>\n                        <td>{i + 1})</td>\n                        <td>{Util.formatDate(t.date)}</td>\n                        <td>{Util.formatSeconds(t.totalTime)}</td>\n                        <td>{t.individual !== undefined ? \"default\" : t.numQuestions}</td>\n                        <td>\n                            <button onClick={() => handleRemove(t.date)}>\n                                <img src={cross} alt=\"X\" />\n                            </button>\n                        </td>\n                    </tr>)\n            }\n        </tbody>\n    </table>);\n}\n\ntype IndividualStatsState = {\n    view: SessionType,\n    history: MathSessionResults[],\n}\n\nexport function IndividualStats(props: IndividualStatsState) {\n    let history = props.history;\n    let oper = props.view as MathOperator;\n    let range = Util.range(DefaultRange.min, DefaultRange.max);\n    let times = range.map(i => range.map(j => StatFuncs.getIndividualAverage(history, oper, i, j, 5)));\n    // let timesSorted: number[] = times\n    //     .reduce((arr, times) => arr.concat(times), [])\n    //     .filter(t => t !== null)\n    //     .sort((a, b) => b! - a!) as number[];\n    // let minTime = Math.min(...timesSorted);\n    // let maxTime = Math.max(...timesSorted);\n    let getColor = (time: number | null) => {\n        if (time === null) {\n            return \"#777777\";\n        }\n        // Ratio based on relative scale\n        // let index = timesSorted.indexOf(time);\n        // let ratio = index / timesSorted.length;\n        // ----- Ratio based on relative scale 2 -----\n        // let ratio = (time - minTime) / (maxTime - minTime);\n        // ----- Ratio based on absolute scale -----\n        //     with 5s as max time\n        let ratio = 1 - Math.min(1, time / 4000);\n        let hue = Math.round(ratio * 160);\n        return `hsl(${hue}, 100%, 50%)`;\n    }\n\n    let tableData = range.map(i => (\n        <tr>\n            <th className=\"IndividualStats-header\">{i}</th>\n            {\n                range.map(j => (() => {\n                    let curTime = times[i - DefaultRange.min][j - DefaultRange.min];\n                    return <td className=\"IndividualStats-data\" style={{ backgroundColor: getColor(curTime) }}>\n                        {curTime === null ? \"N/A\" : (curTime / 1000).toFixed(1)}\n                    </td>\n                })())\n            }\n        </tr>\n    ));\n\n    return (\n        <table className=\"IndividualStats\">\n            <caption>Individual Stats (Average of 5)</caption>\n            <thead>\n                <tr>\n                    <th>{MathOperatorSymbols[oper]}</th>\n                    {\n                        range.map(n => <th>{n}</th>)\n                    }\n                </tr>\n                {tableData}\n            </thead>\n        </table>\n    );\n}","import React from 'react';\nimport { AppContainer } from './components/AppContainer';\nimport { HomeView } from './components/HomeView';\nimport { SelectView } from './components/SelectView';\nimport './App.css';\nimport { MathSessionTemplate, MathSessionOptions, SessionType, MathFuncs, SessionTypeNames, MathSessionResults } from './model/Math';\nimport { Data, StorageFuncs, Settings, DefaultData, AuthData } from './model/Storage';\nimport { Util } from './model/Util';\nimport { MathView } from './components/MathView';\nimport { SettingsView } from './components/SettingsView';\nimport { StatsView } from './components/StatsView';\n\ntype AppView = 'home' | 'select' | 'math' | 'stats' | 'settings' | 'loading';\n\ntype AppProps = {\n\n}\n\ntype AppState = {\n    view: AppView,\n    data: Data,\n    authData: AuthData | null,\n    sessionOptions: MathSessionOptions | null\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            view: 'loading',\n            data: Util.clone(DefaultData),\n            authData: StorageFuncs.loadAuth(),\n            sessionOptions: null\n        }\n        if (this.state.authData !== null) {\n            StorageFuncs.load(this.state.authData).then(data => {\n                if (data) {\n                    this.setState({\n                        view: 'home',\n                        data\n                    });\n                } else {\n                    alert(\"Unable to load from gist\");\n                    this.setState({\n                        view: 'home',\n                        data: Util.clone(DefaultData)\n                    });\n                }\n            });\n        } else {\n            // Kinda sketch\n            this.state = Util.extend(this.state, { view: 'home' });\n        }\n    }\n\n    // Update Data\n    updateData(data: Data) {\n        this.setState({\n            data\n        });\n        if (this.state.authData) {\n            StorageFuncs.save(this.state.authData, data);\n        }\n    }\n\n    // General handlers\n    handleNavigate(view: AppView) {\n        this.setState({\n            view\n        })\n    }\n\n    handleStartDefaultSession(type: SessionType) {\n        let options = MathFuncs.generateDefaultSessionOptions(type);\n        this.handleStartSession(options);\n    }\n\n    // Select View\n    handleTemplateAdd(template: MathSessionTemplate) {\n        let data = Util.clone(this.state.data);\n        data.templates.push(template);\n\n        this.updateData(data);\n    }\n\n    handleTemplateRemove(index: number) {\n        let data = Util.clone(this.state.data);\n        data.templates.splice(index, 1);\n\n        this.updateData(data);\n    }\n\n    handleStartSession(options: MathSessionOptions) {\n        let view: 'math' = 'math';\n        this.setState({\n            view,\n            sessionOptions: options\n        });\n    }\n\n    // Math Session View\n    handleFinishSession(result: MathSessionResults) {\n        alert(\"Finished session in \" + Util.formatSeconds(result.totalTime));\n\n        let data = this.state.data;\n        data.history.push(result);\n        this.setState({\n            view: 'stats',\n            data\n        });\n        this.updateData(data);\n    }\n\n    // Stats View\n    handleRemoveHistory(index: number) {\n        let { data } = Util.clone(this.state);\n        data.history.splice(index, 1);\n        this.updateData(data)\n    }\n\n    // Settings View\n    handleUpdateSettings(settings: Settings) {\n        let data = this.state.data;\n        data.settings = settings;\n        this.updateData(data);\n    }\n\n    async handleAddAuth(token: string): Promise<void> {\n        let authData = await StorageFuncs.saveAuth(token);\n        if (authData === null) {\n            alert(\"Invalid Github auth token\");\n        } else {\n            alert(\"Successfully linked auth data\");\n            this.setState({\n                authData\n            });\n        }\n    }\n\n    async handleCheckSync(): Promise<boolean> {\n        if (!this.state.authData) {\n            return false;\n        }\n        let data = await StorageFuncs.load(this.state.authData);\n        if (Util.compare(data, this.state.data)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    async handleManualSave(): Promise<boolean> {\n        if (!this.state.authData) {\n            return false;\n        }\n        let res = await StorageFuncs.save(this.state.authData, this.state.data);\n        if (res === false) {\n            return false;\n        } else {\n            this.setState({\n                authData: StorageFuncs.loadAuth()\n            })\n            return true;\n        }\n    }\n\n    async handleManualLoad(): Promise<boolean> {\n        if (!this.state.authData) {\n            return false;\n        }\n        let res = await StorageFuncs.load(this.state.authData);\n        if (res === null) {\n            return false;\n        } else {\n            this.setState({\n                data: res\n            });\n            return true;\n        }\n    }\n\n    async handleUnlink(): Promise<boolean> {\n        StorageFuncs.clearAuth();\n        this.setState({\n            authData: null\n        })\n        return true;\n    }\n\n    // ~~Blender~~ render\n    render() {\n        let data = this.state.data;\n        let authData = this.state.authData;\n        let sessionOptions = this.state.sessionOptions;\n        let settings = this.state.data.settings;\n\n        let child: React.ReactNode;\n        let title: string = \"\";\n        let showExit: boolean = false;\n        let onExit = () => this.handleNavigate('home');\n        let exitPrompt: string | null = null;\n\n        if (this.state.view === 'home') {\n            title = \"Math Practice!\";\n            showExit = false;\n            child = <HomeView\n                history={data.history}\n                onStartPractice={this.handleStartDefaultSession.bind(this)}\n                onNavigateSelectSession={() => this.handleNavigate('select')}\n                onNavigateStats={() => this.handleNavigate('stats')}\n                onNavigateSettings={() => this.handleNavigate('settings')}\n            />;\n        } else if (this.state.view === 'select') {\n            title = \"Custom Practice\";\n            showExit = true;\n            child = <SelectView\n                sessionTemplates={data.templates}\n                onAddSessionTemplate={this.handleTemplateAdd.bind(this)}\n                onRemoveSessionTemplate={this.handleTemplateRemove.bind(this)}\n                onStartSession={this.handleStartSession.bind(this)}\n            />\n        } else if (this.state.view === 'math') {\n            title = SessionTypeNames[sessionOptions!.type];\n            showExit = true;\n            exitPrompt = \"Are you sure you want to quit practice now?\";\n            child = <MathView\n                settings={settings}\n                options={sessionOptions!}\n                onFinishSession={this.handleFinishSession.bind(this)}\n            />\n        } else if (this.state.view === 'stats') {\n            title = \"User Statistics\";\n            showExit = true;\n            child = <StatsView\n                onRemoveHistory={this.handleRemoveHistory.bind(this)}\n                history={data.history} />\n        } else if (this.state.view === 'settings') {\n            title = \"Settings\";\n            showExit = true;\n            child = <SettingsView\n                authData={authData}\n                data={data}\n                settings={settings}\n                onUpdateSettings={this.handleUpdateSettings.bind(this)}\n                onAddAuth={this.handleAddAuth.bind(this)}\n                onCheckSync={this.handleCheckSync.bind(this)}\n                onManualSave={this.handleManualSave.bind(this)}\n                onManualLoad={this.handleManualLoad.bind(this)}\n                onUnlink={this.handleUnlink.bind(this)}\n            />\n        } else if (this.state.view === 'loading') {\n            title = \"Loading...\";\n            showExit = false;\n            child = <div></div>\n        }\n\n        return (\n            <AppContainer\n                title={title}\n                exitPrompt={exitPrompt}\n                onExit={onExit}\n                showExit={showExit}>\n                {child}\n            </AppContainer>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}