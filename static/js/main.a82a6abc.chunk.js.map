{"version":3,"sources":["components/AppContainer.tsx","model/Util.ts","model/Math.ts","components/HomeView.tsx","components/SelectView.tsx","model/Storage.ts","components/MathView.tsx","components/SettingsView.tsx","model/Stats.ts","components/StatsView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppContainer","exit","this","props","exitPrompt","window","confirm","onExit","title","children","showExit","className","onClick","handleExit","bind","React","Component","Util","random","Math","randInt","min","max","undefined","floor","randChoice","arr","length","range","_","clone","obj","cloneDeep","shuffle","slice","i","j","extend","prop","plural","amount","text","formatSeconds","mills","round","formatDate","time","Date","getTime","toISOString","MathOperators","SessionTypes","MathOperatorSymbols","SessionTypeNames","DefaultRange","MathFuncs","generateQuestion","num1","num2","oper","ans","Error","generateQuestionsRandom","type","pool","numQuestions","questions","question","push","generateQuestionsOrdered","generateSession","options","isDefault","useRange","order","timeStarted","times","progress","total","generateDefaultSessionOptions","generateSessionResults","session","date","totalTime","reduce","a","t","individual","generateSessionIndividualResults","includes","index1","index2","startSession","HomeView","state","sessionType","onStartPractice","view","onNavigateSelectSession","onNavigateStats","onNavigateSettings","e","target","value","setState","handleStartClick","onChange","handleSelectType","map","key","handleNavigate","RangeControlTypes","RangeControlTypeNames","SelectView","rangeType","numberQuestions","onStartSession","index","template","sessionTemplates","name","prompt","onAddSessionTemplate","onRemoveSessionTemplate","parseInt","Number","isNaN","NaN","num","indexOf","splice","rangeControls","orderControls","templates","pattern","handleInputRangeAmount","onBlur","handleValidateRangeAmount","handleToggleRangePool","n","checked","handleSelectNumberQuestions","handleToggleShuffle","SessionTemplate","onStart","handleStartSessionTemplate","onRemove","handleRemoveTemplate","handleSelectRangeType","handleToggleRandom","handleStartSession","handleSaveTemplate","DefaultData","version","history","settings","showProgressBar","StorageFuncs","verifyData","Array","isArray","serialize","data","JSON","stringify","lzString","compressToUTF16","deserialize","uncompress","decompressFromUTF16","parse","load","localStorage","getItem","save","setItem","MathView","input","setTimeout","startTime","v","elapsedTime","results","onFinishSession","curQuestion","handleInput","SettingsView","showImport","showExport","importText","onUpdateSettings","isImport","onImportSettings","keyCode","handleImportSettings","dataSerialized","handleToggleShowProgressBar","handleImportExportToggle","handleClearData","select","handleExportBlur","handleImportEdit","onKeyPress","handleImportSettingsKeypress","StatFuncs","filterType","filter","getLatestDefault","getHistorySorted","sort","h1","h2","getFastest","result","fastest","b","getSlowest","slowest","getIndividualAverage","filtered","count","sum","res","StatsView","handleChangeView","RecentStats","TotalStats","IndividualStats","latest","child","timesSorted","concat","getColor","ratio","hue","tableData","curTime","style","backgroundColor","App","sessionOptions","updateData","alert","handleStartDefaultSession","handleTemplateAdd","handleTemplateRemove","handleFinishSession","handleUpdateSettings","handleImportData","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a82a6abc.chunk.js","sourcesContent":["import React from 'react';\n\ntype AppContainerProps = {\n    title: string,\n    children: React.ReactNode,\n    showExit: boolean,\n    exitPrompt: string | null,\n    onExit: () => void\n}\n\nexport class AppContainer extends React.Component<AppContainerProps> {\n    handleExit() {\n        let exit = true;\n        if (this.props.exitPrompt !== null) {\n            exit = window.confirm(this.props.exitPrompt);\n        }\n        if (exit) {\n            this.props.onExit();\n        }\n    }\n\n    render() {\n        let title = this.props.title;\n        let children = this.props.children;\n        let showExit = this.props.showExit;\n        return <div className=\"AppContainer\">\n            <div className=\"AppContainer-topbar\">\n                <span>{title}</span>\n                {showExit ? <button onClick={this.handleExit.bind(this)}>×</button> : null}\n            </div>\n            <div className=\"AppContainer-container\">\n                {children}\n            </div>\n        </div>;\n    }\n}","import _ from 'lodash';\n\nexport const Util = {\n    random(): number {\n        return Math.random();\n    },\n    randInt(min: number, max?: number): number {\n        if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return Math.floor(Util.random() * (max - min)) + min;\n    },\n    randChoice<T>(arr: T[]): T {\n        return arr[Util.randInt(0, arr.length)];\n    },\n    range(min: number, max: number) {\n        return _.range(min, max + 1);\n    },\n    clone<T>(obj: T): T {\n        return _.cloneDeep(obj);\n    },\n    shuffle<T>(arr: T[]): T[] {\n        arr = arr.slice();\n        for (let i = 0; i < arr.length; i++) {\n            let j = Util.randInt(0, arr.length);\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        return arr;\n    },\n    extend<TSource, TObj>(obj: TSource, prop: TObj): TSource & TObj {\n        return _.extend(obj, prop)\n    },\n    plural(amount: number,text: string) {\n        return amount + \" \" + text + (amount === 1 ? \"\" : \"s\");\n    },\n    formatSeconds(mills: number): string {\n        return Math.round(mills / 100) / 10 + \"s\";\n    },\n    formatDate(time: number, curTime: number = new Date().getTime()): string {\n        return new Date(time).toISOString();\n    }\n}","import { Util } from \"./Util\";\n\nexport type MathOperator = 'add' | 'sub' | 'mul' | 'div';\n\nexport const MathOperators: MathOperator[] = ['add', 'sub', 'mul', 'div'];\n\nexport type SessionType = MathOperator | 'mix' | 'sqr';\n\nexport const SessionTypes: SessionType[] = ['add', 'sub', 'mul', 'div', 'mix', 'sqr'];\n\nexport const MathOperatorSymbols = {\n    'add': '+',\n    'sub': '-',\n    'mul': '*',\n    'div': '/'\n}\n\nexport const SessionTypeNames = {\n    'add': 'Addition',\n    'sub': 'Subtraction',\n    'mul': 'Multiplication',\n    'div': 'Division',\n    'mix': 'Mixed',\n    'sqr': 'Squares'\n}\n\nexport type MathQuestion = {\n    num1: number,\n    num2: number,\n    oper: MathOperator,\n    ans: number\n}\n\nexport type MathSession = {\n    timeStarted: number,\n    type: SessionType,\n    questions: MathQuestion[],\n    times: number[],\n    progress: number,\n    total: number,\n    isDefault: boolean,\n}\n\nexport type MathSessionOrder = 'all' | 'all-shuffle' | 'random';\n\nexport type MathSessionOptions = {\n    type: SessionType,\n    // Whether to use range or pool\n    useRange: boolean,\n    pool?: number[],\n    range?: { min: number, max: number },\n\n    // Run all questions, all but shuffled, or a random amount (uses numQuestions)\n    order: MathSessionOrder,\n    numQuestions?: number,\n\n    // Whether or not this is a default session\n    isDefault: boolean\n}\n\nexport type MathSessionTemplate = {\n    options: MathSessionOptions,\n    name: string\n}\n\nexport type MathSessionResults = {\n    date: number,\n    type: SessionType,\n    totalTime: number,\n    numQuestions: number,\n    individual?: MathSessionIndividualResults\n}\n\nexport type MathSessionIndividualResults = {\n    oper: MathOperator,\n    range: { min: number, max: number }\n    times: number[][]\n}\n\nexport const DefaultRange = {\n    min: 1,\n    max: 12\n}\n\nexport const MathFuncs = {\n    generateQuestion(num1: number, num2: number, oper: MathOperator): MathQuestion {\n        if (oper === 'add') {\n            return {\n                num1, num2, oper, ans: num1 + num2\n            }\n        } else if (oper === 'sub') {\n            return {\n                num1: num1 + num2, num2, oper, ans: num1\n            }\n        } else if (oper === 'mul') {\n            return {\n                num1, num2, oper, ans: num1 * num2\n            }\n        } else if (oper === 'div') {\n            return {\n                num1: num1 * num2, num2, oper, ans: num1\n            }\n        }\n        throw Error();\n    },\n    generateQuestionsRandom(type: SessionType, pool: number[], numQuestions: number): MathQuestion[] {\n        let num1: number;\n        let num2: number;\n        let oper: MathOperator;\n        let questions: MathQuestion[] = [];\n        for (let i = 0; i < numQuestions; i++) {\n            if (type === \"mix\") {\n                oper = Util.randChoice(MathOperators);\n                num1 = Util.randChoice(pool);\n                num2 = Util.randChoice(pool);\n            } else if (type === \"sqr\") {\n                oper = 'mul';\n                num1 = Util.randChoice(pool);\n                num2 = num1;\n            } else {\n                oper = type;\n                num1 = Util.randChoice(pool);\n                num2 = Util.randChoice(pool);\n            }\n            let question = MathFuncs.generateQuestion(num1, num2, oper);\n            questions.push(question);\n        }\n        return questions;\n    },\n    generateQuestionsOrdered(type: SessionType, pool: number[]): MathQuestion[] {\n        let num1: number;\n        let num2: number;\n        let oper: MathOperator;\n        let questions: MathQuestion[] = [];\n        for (let i = 0; i < pool.length; i++) {\n            for (let j = 0; j < pool.length; j++) {\n                if (type === \"mix\") {\n                    oper = Util.randChoice(MathOperators);\n                    num1 = pool[i];\n                    num2 = pool[j];\n                } else if (type === \"sqr\") {\n                    oper = \"mul\";\n                    num1 = pool[i];\n                    num2 = pool[j];\n                    if (num1 !== num2) {\n                        continue;\n                    }\n                } else {\n                    oper = type;\n                    num1 = pool[i];\n                    num2 = pool[j];\n                }\n                let question = MathFuncs.generateQuestion(num1, num2, oper);\n                questions.push(question);\n            }\n        }\n        return questions;\n    },\n    generateSession(options: MathSessionOptions): MathSession {\n        let type = options.type;\n        let questions: MathQuestion[] = [];\n        let timeStarted = 0;\n        let times: number[] = [];\n        let progress = 0;\n        let total: number;\n        let isDefault = options.isDefault;\n\n        let pool: number[];\n        if (options.useRange) {\n            pool = Util.range(options.range!.min, options.range!.max);\n        } else {\n            pool = Util.clone(options.pool!);\n        }\n\n        // Generate Questions\n        if (options.order === \"random\") {\n            questions = MathFuncs.generateQuestionsRandom(type, pool, options.numQuestions!);\n        } else if (options.order === \"all\") {\n            questions = MathFuncs.generateQuestionsOrdered(type, pool);\n        } else if (options.order === \"all-shuffle\") {\n            questions = MathFuncs.generateQuestionsOrdered(type, pool);\n            questions = Util.shuffle(questions);\n        }\n        total = questions.length;\n\n        return {\n            timeStarted,\n            type,\n            questions,\n            times,\n            progress,\n            total,\n            isDefault\n        }\n    },\n    generateDefaultSessionOptions(type: SessionType): MathSessionOptions {\n        let useRange = true;\n        let range = Util.clone(DefaultRange);\n        let order: \"all-shuffle\" = \"all-shuffle\";\n        return {\n            type,\n            useRange,\n            range,\n            order,\n            isDefault: true\n        };\n    },\n    generateSessionResults(session: MathSession): MathSessionResults {\n        let date = session.timeStarted;\n        let type = session.type;\n        let totalTime = session.times.reduce((a, t) => a + t, 0)\n        let individual = MathFuncs.generateSessionIndividualResults(session);\n        let numQuestions = session.total;\n        return {\n            date,\n            type,\n            totalTime,\n            numQuestions,\n            individual\n        };\n    },\n    generateSessionIndividualResults(session: MathSession): MathSessionIndividualResults | undefined {\n        // Only default math sessions where the session type is a math operator\n        // are allowed\n        if (!session.isDefault || !MathOperators.includes(session.type as MathOperator)) {\n            return;\n        }\n        let oper = session.type as MathOperator;\n        let range = Util.clone(DefaultRange);\n        let times: number[][] = [];\n        for (let i = range.min; i <= range.max; i++) {\n            let arr: number[] = []\n            for (let j = range.min; j <= range.max; j++) {\n                arr.push(0);\n            }\n            times.push(arr);\n        }\n        for (let i = 0; i < session.questions.length; i++) {\n            let question = session.questions[i];\n            let time = session.times[i];\n            let num1: number, num2: number;\n            if (['sub', 'div'].includes(question.oper)) {\n                num1 = question.ans;\n                num2 = question.num2;\n            } else {\n                num1 = question.num1;\n                num2 = question.num2;\n            }\n            let index1 = num1 - range.min;\n            let index2 = num2 - range.min;\n            times[index1][index2] = time;\n        }\n\n        return {\n            oper,\n            range,\n            times\n        };\n    },\n    startSession(session: MathSession): MathSession {\n        session.timeStarted = new Date().getTime();\n        return session;\n    }\n}","import React from 'react';\nimport { SessionType, SessionTypes, SessionTypeNames } from '../model/Math';\nimport './HomeView.css';\n\ntype HomeViewProps = {\n    onStartPractice: (type: SessionType) => void,\n    onNavigateSelectSession: () => void,\n    onNavigateStats: () => void,\n    onNavigateSettings: () => void\n}\n\ntype HomeViewState = {\n    sessionType: SessionType,\n}\n\nexport class HomeView extends React.Component<HomeViewProps, HomeViewState> {\n    constructor(props: HomeViewProps) {\n        super(props);\n        this.state = {\n            sessionType: \"add\"\n        }\n    }\n\n    handleStartClick() {\n        this.props.onStartPractice(this.state.sessionType);\n    }\n\n    handleNavigate(view: 'select' | 'stats' | 'settings') {\n        if (view === 'select') {\n            this.props.onNavigateSelectSession();\n        } else if (view === 'stats') {\n            this.props.onNavigateStats();\n        } else {\n            this.props.onNavigateSettings();\n        }\n    }\n\n    handleSelectType(e: React.ChangeEvent) {\n        let sessionType = (e.target as HTMLSelectElement).value as SessionType;\n        this.setState({\n            sessionType\n        })\n    }\n\n    render() {\n        let sessionType = this.state.sessionType;\n        return (\n            <div className=\"Home\">\n                <button className=\"Home-start\" onClick={this.handleStartClick.bind(this)}>Start Practice</button>\n                <select className=\"Home-start-type\" value={sessionType} onChange={this.handleSelectType.bind(this)}>\n                    {\n                        SessionTypes.map(t => <option value={t} key={t}>\n                            {SessionTypeNames[t]}\n                        </option>)\n                    }\n                </select>\n                <span className=\"link\" onClick={() => this.handleNavigate('select')}>\n                    Custom Session\n                </span>\n                <span className=\"link\" onClick={() => this.handleNavigate('stats')}>\n                    User Stats\n                </span>\n                <span className=\"link\" onClick={() => this.handleNavigate('settings')}>\n                    Settings\n                </span>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { MathSessionTemplate, MathSessionOptions, SessionType, SessionTypes, SessionTypeNames } from '../model/Math';\nimport { Util } from '../model/Util';\nimport './SelectView.css';\n\ntype RangeControlType = \"range\" | \"pool\";\n\nconst RangeControlTypes: RangeControlType[] = [\"range\", \"pool\"];\n\nconst RangeControlTypeNames = {\n    \"range\": \"Range\",\n    \"pool\": \"Pool\"\n}\n\ntype SelectViewProps = {\n    sessionTemplates: MathSessionTemplate[],\n    onStartSession: (options: MathSessionOptions) => void,\n    onAddSessionTemplate: (template: MathSessionTemplate) => void,\n    onRemoveSessionTemplate: (index: number) => void,\n}\n\ntype SelectViewState = {\n    rangeType: RangeControlType,\n    range: { min: number, max: number },\n    pool: number[],\n    type: SessionType,\n    shuffle: boolean,\n    random: boolean,\n    numberQuestions: number\n}\n\nexport class SelectView extends React.Component<SelectViewProps, SelectViewState> {\n    constructor(props: SelectViewProps) {\n        super(props);\n        this.state = {\n            rangeType: \"range\",\n            range: { min: 1, max: 12 },\n            pool: Util.range(1, 12),\n            type: \"add\",\n            shuffle: true,\n            random: false,\n            numberQuestions: 20\n        }\n    }\n\n    handleStartSession() {\n        this.props.onStartSession({\n            type: this.state.type,\n            useRange: this.state.rangeType === \"range\",\n            range: this.state.range,\n            pool: this.state.pool,\n            order: this.state.random ? \"random\" :\n                this.state.shuffle ? \"all-shuffle\" : \"all\",\n            numQuestions: this.state.numberQuestions,\n            isDefault: false\n        });\n    }\n\n    handleStartSessionTemplate(index: number) {\n        let template = this.props.sessionTemplates[index];\n        this.props.onStartSession(template.options);\n    }\n\n    handleSaveTemplate() {\n        let options: MathSessionOptions = {\n            type: this.state.type,\n            useRange: this.state.rangeType === \"range\",\n            range: this.state.range,\n            pool: this.state.pool,\n            order: this.state.random ? \"random\" :\n                this.state.shuffle ? \"all-shuffle\" : \"all\",\n            numQuestions: this.state.numberQuestions,\n            isDefault: false\n        }\n        let name = window.prompt(\"Please enter a name for your session:\");\n        if (name === null) {\n            return;\n        }\n        this.props.onAddSessionTemplate({\n            options,\n            name\n        })\n    }\n\n    handleRemoveTemplate(index: number) {\n        this.props.onRemoveSessionTemplate(index);\n    }\n\n    handleSelectRangeType(e: React.ChangeEvent) {\n        let rangeType = (e.target as HTMLSelectElement).value as RangeControlType;\n        this.setState({ rangeType });\n    }\n\n    handleInputRangeAmount(e: React.ChangeEvent, min: boolean) {\n        let value = parseInt((e.target as HTMLInputElement).value, 10);\n        let range = Util.clone(this.state.range);\n        if (min) {\n            range.min = value;\n        } else {\n            range.max = value;\n        }\n        this.setState({\n            range\n        });\n    }\n\n    handleValidateRangeAmount(e: React.ChangeEvent, min: boolean) {\n        let value = parseInt((e.target as HTMLInputElement).value, 10);\n        if (Number.isNaN(value)) {\n            value = NaN\n        }\n        value = Math.min(Math.max(value, 1), 1000);\n        let range = Util.clone(this.state.range);\n        if (min) {\n            range.min = value;\n            if (range.max < range.min) {\n                range.max = range.min;\n            }\n        } else {\n            range.max = value;\n            if (range.min > range.max) {\n                range.min = range.max\n            }\n        }\n        this.setState({\n            range\n        });\n    }\n\n    handleToggleRangePool(num: number) {\n        let pool = this.state.pool\n        let index = pool.indexOf(num);\n        if (index === -1) {\n            pool.push(num);\n        } else {\n            pool.splice(index, 1);\n        }\n        this.setState({ pool });\n    }\n\n    handleSelectType(e: React.ChangeEvent) {\n        let type = (e.target as HTMLSelectElement).value as SessionType;\n        this.setState({ type });\n    }\n\n    handleToggleShuffle() {\n        this.setState({\n            shuffle: !this.state.shuffle\n        });\n    }\n\n    handleToggleRandom() {\n        this.setState({\n            random: !this.state.random\n        });\n    }\n\n    handleSelectNumberQuestions(numberQuestions: number) {\n        this.setState({\n            numberQuestions\n        });\n    }\n\n    render() {\n        let templates = this.props.sessionTemplates;\n        let rangeType = this.state.rangeType;\n        let range = this.state.range;\n        let pool = this.state.pool;\n        let type = this.state.type;\n        let random = this.state.random;\n        let shuffle = this.state.shuffle;\n        let numberQuestions = this.state.numberQuestions;\n\n        let rangeControls: React.ReactNode;\n        if (rangeType === \"range\") {\n            rangeControls = <div className=\"Select-range-range\">\n                <input type=\"number\" pattern=\"[0-9]*\"\n                    value={Number.isNaN(range.min) ? \"\" : range.min}\n                    onChange={e => this.handleInputRangeAmount(e, true)}\n                    onBlur={e => this.handleValidateRangeAmount(e, true)} />\n                <input type=\"number\" pattern=\"[0-9]*\"\n                    value={Number.isNaN(range.max) ? \"\" : range.max}\n                    onChange={e => this.handleInputRangeAmount(e, false)}\n                    onBlur={e => this.handleValidateRangeAmount(e, false)} />\n            </div>\n        } else if (rangeType === \"pool\") {\n            rangeControls = <div className=\"Select-range-pool\">{\n                Util.range(1, 12).map(i =>\n                    <button key={i}\n                        className={\"Select-range-pool-button \" +\n                            (pool.includes(i) ? \"Select-range-pool-button-selected\" : \"\")}\n                        onClick={() => this.handleToggleRangePool(i)}>\n                        {i}\n                    </button>)\n            }</div>\n        }\n\n        let orderControls: React.ReactNode;\n        if (random) {\n            orderControls = <div className=\"Select-order-random\">\n                {\n                    [20, 50, 100].map(n => [\n                        <input type=\"radio\" value={n}\n                            checked={n === numberQuestions}\n                            onChange={() => this.handleSelectNumberQuestions(n)} />,\n                        <label\n                            onClick={() => this.handleSelectNumberQuestions(n)}>{n} Questions</label>\n                    ])\n                }\n            </div>\n        } else {\n            orderControls = <div className=\"Select-order-shuffle\">\n                <input type=\"checkbox\" checked={shuffle}\n                    onChange={this.handleToggleShuffle.bind(this)} />\n                <label\n                    onClick={this.handleToggleShuffle.bind(this)}> Shuffle? </label>\n            </div>\n        }\n\n        return (\n            <div className=\"Select\">\n                <div className=\"Select-templates\">\n                    {\n                        templates.map((t, i) =>\n                            <SessionTemplate\n                                name={t.name}\n                                key={t.name}\n                                onStart={() => this.handleStartSessionTemplate(i)}\n                                onRemove={() => this.handleRemoveTemplate(i)}\n                            />\n                        )\n                    }\n                </div>\n                <div className=\"Select-options\">\n                    <div className=\"Select-rangetype\">\n                        <select value={rangeType} onChange={this.handleSelectRangeType.bind(this)}>\n                            {\n                                RangeControlTypes.map(t =>\n                                    <option key={t} value={t}>{RangeControlTypeNames[t]}</option>)\n                            }\n                        </select>\n                    </div>\n                    {rangeControls}\n                    <div className=\"Select-type\">\n                        <span>Type: </span>\n                        <select value={type} onChange={this.handleSelectType.bind(this)}>\n                            {\n                                SessionTypes.map(t =>\n                                    <option key={t} value={t}>{SessionTypeNames[t]}</option>)\n                            }\n                        </select>\n                    </div>\n                    <div className=\"Select-order\">\n                        <input type=\"checkbox\" checked={random}\n                            onChange={this.handleToggleRandom.bind(this)} />\n                        <label onClick={this.handleToggleRandom.bind(this)}>\n                            Random?\n                        </label>\n                        {orderControls}\n                    </div>\n                    <div className=\"Select-submit\">\n                        <button onClick={this.handleStartSession.bind(this)}>Start Practice</button>\n                        <span className=\"link\" onClick={this.handleSaveTemplate.bind(this)}>Save Settings</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype SessionTemplateProps = {\n    name: string,\n    onStart: () => void,\n    onRemove: () => void\n}\n\nexport function SessionTemplate(props: SessionTemplateProps) {\n    return (<div className=\"SessionTemplate\">\n        <button className=\"SessionTemplate-start\" onClick={props.onStart}>Start</button>\n        <span className=\"SessionTemplate-name\">{props.name}</span>\n        <button className=\"SessionTemplate-remove\" onClick={props.onRemove}>×</button>\n    </div>);\n}","import { MathSessionTemplate, MathSessionResults } from \"./Math\";\nimport lzString from \"lz-string\";\nimport { Util } from \"./Util\";\n\nconst version = \"v0.1.0\";\n\nexport type Settings = {\n    showProgressBar: boolean\n}\n\nconst defaultSettings: Settings = {\n    showProgressBar: false\n}\n\nexport type Data = {\n    version: string,\n    history: MathSessionResults[],\n    templates: MathSessionTemplate[],\n    settings: Settings\n}\n\nexport const DefaultData: Data = {\n    version,\n    history: [],\n    templates: [],\n    settings: defaultSettings\n}\n\nexport const StorageFuncs = {\n    verifyData(obj: any): obj is Data {\n        return (typeof obj === \"object\") &&\n            (obj.version !== undefined) &&\n            (obj.version === version) &&\n            (obj.history !== undefined) &&\n            (Array.isArray(obj.history)) &&\n            (obj.templates !== undefined) &&\n            (Array.isArray(obj.templates)) &&\n            (obj.settings !== undefined) &&\n            (typeof obj.settings === \"object\");\n    },\n    serialize(data: Data): string {\n        let text = JSON.stringify(data);\n        let compress = lzString.compressToUTF16(text);\n        return compress;\n    },\n    deserialize(text: string): Data {\n        let uncompress = lzString.decompressFromUTF16(text);\n        let data = JSON.parse(uncompress);\n        if (this.verifyData(data)) {\n            return data;\n        } else {\n            throw Error(\"Could not parse data\");\n        }\n    },\n    load(): Data {\n        let text = window.localStorage.getItem(version);\n        if (text === null) {\n            return Util.clone(DefaultData);\n        } else {\n            return StorageFuncs.deserialize(text);\n        }\n    },\n    async save(data: Data) {\n        let text = StorageFuncs.serialize(data);\n        window.localStorage.setItem(version, text);\n    }\n}","import React from 'react';\nimport { MathSession, MathFuncs, MathSessionOptions, MathOperatorSymbols, MathSessionResults } from '../model/Math';\nimport { Settings } from '../model/Storage';\n\ntype MathViewProps = {\n    options: MathSessionOptions,\n    settings: Settings,\n    onFinishSession: (results: MathSessionResults) => void\n}\n\ntype MathViewState = {\n    input: number | null,\n    session: MathSession\n}\n\n\nexport class MathView extends React.Component<MathViewProps, MathViewState> {\n    constructor(props: MathViewProps) {\n        super(props);\n        let session = MathFuncs.generateSession(props.options);\n        MathFuncs.startSession(session);\n        this.state = {\n            session,\n            input: null\n        }\n    }\n\n    handleInput(e: React.FormEvent) {\n        // Skip if already finished somehow\n        if (this.state.session.progress === this.state.session.total) {\n            return;\n        }\n\n        let value = (e.target as HTMLInputElement).value as string;\n        let num = parseInt(value, 10);\n\n        let input = this.state.input;\n        input = Number.isNaN(num) ? null : num;\n\n        this.setState({ input }, () => setTimeout(() => {\n            let session = this.state.session;\n            // Skip if already finished somehow\n            if (this.state.session.progress === this.state.session.total) {\n                return;\n            }\n\n            if (input === session.questions[session.progress].ans) {\n                let input = null;\n                let startTime = session.timeStarted;\n                let totalTime = session.times.reduce((v, t) => v + t, 0);\n                let currentTime = new Date().getTime()\n                let elapsedTime = currentTime - startTime - totalTime;\n                session.times.push(elapsedTime);\n                session.progress += 1;\n                if (session.progress === session.total) {\n                    let results = MathFuncs.generateSessionResults(session);\n                    this.props.onFinishSession(results)\n                } else {\n                    this.setState({\n                        session,\n                        input\n                    });\n                }\n            }\n        }, 100));\n    }\n\n    render() {\n        let settings = this.props.settings;\n        let input = this.state.input;\n        let session = this.state.session;\n        let curQuestion = session.questions[session.progress];\n\n        return (\n            <div className=\"Math\">\n                <div className=\"Math-session\">\n                    <div className=\"Math-question\">\n                        <div className=\"Math-numbers\">\n                            <span>{curQuestion.num1}</span>\n                            <span>{curQuestion.num2}</span>\n                        </div>\n                        <span className=\"Math-oper\">{MathOperatorSymbols[curQuestion.oper]}</span>\n                    </div>\n                    <div className=\"Math-answer\">\n                        <input\n                            value={input ?? \"\"}\n                            onChange={this.handleInput.bind(this)}\n                            type=\"number\" />\n                    </div>\n                    {\n                        settings.showProgressBar ?\n                            <progress\n                                className=\"Math-progress\"\n                                value={session.progress}\n                                max={session.total}\n                            /> : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Settings, Data, StorageFuncs, DefaultData } from '../model/Storage';\nimport './SettingsView.css'\nimport { Util } from '../model/Util';\n\ntype SettingsViewProps = {\n    data: Data,\n    settings: Settings,\n    onUpdateSettings: (settings: Settings) => void,\n    onImportSettings: (text: string) => boolean,\n}\n\ntype SettingsViewState = {\n    showImport: boolean,\n    showExport: boolean,\n    importText: string\n}\n\nexport class SettingsView extends React.Component<SettingsViewProps, SettingsViewState> {\n    constructor(props: SettingsViewProps) {\n        super(props);\n        this.state = {\n            showImport: false,\n            showExport: false,\n            importText: \"\"\n        }\n    }\n\n    handleToggleShowProgressBar() {\n        let settings = this.props.settings;\n        settings.showProgressBar = !settings.showProgressBar;\n        this.props.onUpdateSettings(settings);\n    }\n\n    handleImportExportToggle(isImport: boolean) {\n        let showImport = this.state.showImport;\n        let showExport = this.state.showExport;\n        if (isImport) {\n            showImport = !showImport;\n            showExport = false;\n        } else {\n            showImport = false;\n            showExport = !showExport;\n        }\n        this.setState({\n            showImport,\n            showExport\n        })\n    }\n\n    handleExportBlur() {\n        this.setState({\n            showImport: false,\n            showExport: false\n        })\n    }\n\n    handleImportEdit(e: React.SyntheticEvent) {\n        let importText = (e.target as HTMLTextAreaElement).value;\n        this.setState({\n            importText: importText\n        });\n    }\n\n    handleImportSettings(e: React.SyntheticEvent) {\n        let text = (e.target as HTMLTextAreaElement).value;\n        if (text === \"\") {\n            return;\n        }\n        let res = this.props.onImportSettings(text);\n        if (res) {\n            this.setState({\n                importText: \"Successfully imported data!\"\n            }, () => {\n                setTimeout(() => {\n                    this.setState({\n                        showImport: false,\n                        showExport: false\n                    });\n                }, 1000);\n            });\n        } else {\n            this.setState({\n                importText: \"Invalid input\"\n            });\n        }\n    }\n\n    handleImportSettingsKeypress(e: React.KeyboardEvent) {\n        if (e.keyCode === 13) {\n            this.handleImportSettings(e);\n        }\n    }\n\n    handleClearData() {\n        if (window.confirm(\"Are you sure you want to delete all your session data?\\n(This cannot be undone)\")) {\n            this.props.onImportSettings(StorageFuncs.serialize(DefaultData));\n        }\n    }\n\n    render() {\n        let settings = this.props.settings;\n        let showImport = this.state.showImport;\n        let showExport = this.state.showExport;\n        let dataSerialized = StorageFuncs.serialize(this.props.data);\n        return <div className=\"Settings\">\n            <fieldset className=\"Settings-fieldset\">\n                <legend>Math Session</legend>\n                <input\n                    type=\"checkbox\"\n                    checked={settings.showProgressBar}\n                    onChange={this.handleToggleShowProgressBar.bind(this)} />\n                <label onClick={this.handleToggleShowProgressBar.bind(this)}>Show Progress Bar</label>\n            </fieldset>\n            <fieldset className=\"Settings-fieldset\">\n                <legend>Import/Export</legend>\n                <span\n                    className=\"link\"\n                    onClick={() => this.handleImportExportToggle(true)}>Import</span>\n                <span\n                    className=\"link\"\n                    onClick={() => this.handleImportExportToggle(false)}>Export</span>\n                <span\n                    className=\"link\"\n                    onClick={this.handleClearData.bind(this)}>Clear Data</span><br />\n                {\n                    showExport ? (\n                        <textarea\n                            className=\"Settings-export-box\"\n                            onClick={e => (e.target as HTMLTextAreaElement).select()}\n                            onBlur={this.handleExportBlur.bind(this)}\n                            value={dataSerialized}></textarea>\n                    ) : showImport ? (\n                        <textarea\n                            onClick={e => (e.target as HTMLTextAreaElement).select()}\n                            onChange={this.handleImportEdit.bind(this)}\n                            onKeyPress={this.handleImportSettingsKeypress.bind(this)}\n                            onBlur={this.handleImportSettings.bind(this)}\n                            className=\"Settings-import-box\"\n                            value={this.state.importText}\n                        ></textarea>\n                    ) : null\n                }\n            </fieldset>\n        </div>\n    }\n}","import { SessionType, MathSessionResults, MathQuestion, MathOperator, MathFuncs, DefaultRange } from \"./Math\";\n\ntype QuestionTime = {\n    question: MathQuestion\n    time: number\n}\n\nexport const StatFuncs = {\n    filterType(history: MathSessionResults[], type: SessionType): MathSessionResults[] {\n        return history.filter(v => v.type === type);\n    },\n    getLatestDefault(history: MathSessionResults[], type: SessionType): MathSessionResults | null {\n        for (let i = history.length - 1; i >= 0; i--) {\n            if (history[i].type === type) {\n                return history[i];\n            }\n        }\n        return null;\n    },\n    getHistorySorted(history: MathSessionResults[]): MathSessionResults[] {\n        return history.slice().sort((h1, h2) => h1.date - h2.date);\n    },\n    getFastest(result: MathSessionResults, amount: number): QuestionTime[] {\n        let individual = result.individual!;\n        let fastest: QuestionTime[] = [];\n        // Loop over each time\n        for (let i = 0; i < individual.times.length; i++) {\n            for (let j = 0; j < individual.times.length; j++) {\n                let time = individual.times[i][j];\n                // Add if it is faster than the slowest in the list\n                if (fastest.length < amount || fastest[fastest.length - 1].time > time) {\n                    fastest.push({\n                        question:\n                            MathFuncs.generateQuestion(i + individual.range.min,\n                                j + individual.range.min, result.type as MathOperator),\n                        time: time\n                    });\n                    fastest.sort((a, b) => a.time - b.time);\n                    fastest.splice(amount);\n                }\n            }\n        }\n        return fastest;\n    },\n    getSlowest(result: MathSessionResults, amount: number): QuestionTime[] {\n        let individual = result.individual!;\n        let slowest: QuestionTime[] = [];\n        for (let i = 0; i < individual.times.length; i++) {\n            for (let j = 0; j < individual.times.length; j++) {\n                let time = individual.times[i][j];\n                if (slowest.length < amount || slowest[slowest.length - 1].time < time) {\n                    slowest.push({\n                        question:\n                            MathFuncs.generateQuestion(i + individual.range.min,\n                                j + individual.range.min, result.type as MathOperator),\n                        time: time\n                    });\n                    slowest.sort((a, b) => b.time - a.time);\n                    slowest.splice(amount);\n                }\n            }\n        }\n        return slowest;\n    },\n    getIndividualAverage(history: MathSessionResults[], type: SessionType,\n        num1: number, num2: number, amount: number): number | null {\n\n        let filtered = StatFuncs.filterType(history, type);\n        let count = 0;\n        let sum = 0;\n        for (const res of filtered) {\n            if (res.individual !== undefined) {\n                count += 1;\n                sum += res.individual.times[num1 - DefaultRange.min][num2 - DefaultRange.min];\n            }\n        }\n\n        if (count === 0) {\n            return null;\n        } else {\n            return sum / count;\n        }\n    }\n}","import React from 'react';\nimport { SessionType, MathSessionResults, SessionTypes, SessionTypeNames, MathOperatorSymbols, DefaultRange, MathOperator, MathOperators } from '../model/Math';\nimport { StatFuncs } from '../model/Stats';\nimport { Util } from '../model/Util';\nimport './StatsView.css';\n\ntype StatsViewProps = {\n    history: MathSessionResults[]\n}\n\ntype StatsViewState = {\n    history: MathSessionResults[],\n    view: SessionType\n}\n\nexport class StatsView extends React.Component<StatsViewProps, StatsViewState> {\n    constructor(props: StatsViewProps) {\n        super(props);\n        this.state = {\n            history: StatFuncs.getHistorySorted(props.history),\n            view: 'add'\n        };\n    }\n\n    handleChangeView(e: React.ChangeEvent) {\n        let view = (e.target as HTMLSelectElement).value as SessionType;\n        this.setState({\n            view\n        });\n    }\n\n    render() {\n        let view = this.state.view;\n        let history = this.state.history;\n        return (\n            <div className=\"StatsView\">\n                <select value={view} onChange={this.handleChangeView.bind(this)}>\n                    {\n                        SessionTypes.map(t =>\n                            <option key={t} value={t}>{SessionTypeNames[t]}</option>)\n                    }\n                </select>\n                <span>{SessionTypeNames[view]} Attempts: {StatFuncs.filterType(history, view).length}</span>\n                <span>Total Attempts: {history.length}</span>\n                <RecentStats {...this.state} />\n                <TotalStats {...this.state} />\n                {\n                    MathOperators.includes(view as MathOperator) ? (\n                        <IndividualStats {...this.state} />\n                    ) : null\n                }\n            </div>\n        );\n    }\n}\n\nexport function RecentStats(props: StatsViewState) {\n    let history = props.history;\n    let latest = StatFuncs.getLatestDefault(history, props.view);\n\n    let child = (latest === null || latest.individual === undefined) ? null : (\n        <tr>\n            <td>\n                Fastest Times:\n                <ul>\n                    {\n                        StatFuncs.getFastest(latest, 5).map((v, i) =>\n                            <li key={i}>\n                                {v.question.num1 + MathOperatorSymbols[v.question.oper] + v.question.num2 +\n                                    \" - \" + Util.formatSeconds(v.time)}\n                            </li>)\n                    }\n                </ul>\n            </td>\n            <td>\n                Slowest Times:\n                <ul>\n                    {\n                        StatFuncs.getSlowest(latest, 5).map((v, i) =>\n                            <li key={i}>\n                                {v.question.num1 + MathOperatorSymbols[v.question.oper] + v.question.num2 +\n                                    \" - \" + Util.formatSeconds(v.time)}\n                            </li>)\n                    }\n                </ul>\n            </td>\n        </tr>);\n    return (<table className=\"RecentStats\">\n        <caption>Latest Session:</caption>\n        <thead>\n            <tr>\n                <td>Date</td>\n                <td>Time</td>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>{latest === null ? \"None\" :\n                    Util.formatDate(latest.date)}</td>\n                <td>{latest === null ? \"None\" :\n                    Util.formatSeconds(latest.totalTime)}</td>\n            </tr>\n            {child}\n        </tbody>\n    </table>);\n}\n\nexport function TotalStats(props: StatsViewState) {\n    let history = props.history;\n    let filtered = StatFuncs.filterType(history, props.view);\n    return (<table className=\"TotalStats\">\n        <caption>All Sessions</caption>\n        <thead>\n            <tr>\n                <td>&nbsp;</td>\n                <td>Date</td>\n                <td>Total Time</td>\n                <td>Num Questions</td>\n            </tr>\n        </thead>\n        <tbody> {\n            filtered.map((t, i) =>\n                <tr key={i}>\n                    <td>{i + 1}</td>\n                    <td>{Util.formatDate(t.date)}</td>\n                    <td>{Util.formatSeconds(t.totalTime)}</td>\n                    <td>{t.individual !== undefined ? \"default\" : t.numQuestions}</td>\n                </tr>)\n        }\n        </tbody>\n    </table>);\n}\n\nexport function IndividualStats(props: StatsViewState) {\n    let history = props.history;\n    let oper = props.view as MathOperator;\n    let range = Util.range(DefaultRange.min, DefaultRange.max);\n    let times = range.map(i => range.map(j => StatFuncs.getIndividualAverage(history, oper, i, j, 5)));\n    let timesSorted = times.reduce((arr, times) => arr.concat(times), []).sort((a, b) => b! - a!);\n    let getColor = (time: number | null) => {\n        if (time === null) {\n            return \"#777777\";\n        }\n        let index = timesSorted.indexOf(time);\n        let ratio = index / timesSorted.length;\n        let hue = Math.round(ratio * 160);\n        return `hsl(${hue}, 100%, 50%)`;\n    }\n\n    let tableData = range.map(i => (\n        <tr>\n            <td className=\"IndividualStats-header\">{i}</td>\n            {\n                range.map(j => (() => {\n                    let curTime = times[i - DefaultRange.min][j - DefaultRange.min];\n                    return <td className=\"IndividualStats-data\" style={{ backgroundColor: getColor(curTime) }}>\n                        {curTime === null ? \"N/A\" : Util.formatSeconds(curTime)}\n                    </td>\n                })())\n            }\n        </tr>\n    ));\n\n    return (\n        <table>\n            <caption>Individual Stats (Average of 5)</caption>\n            <thead>\n                <tr>\n                    <td className=\"IndividualStats-header\">{MathOperatorSymbols[oper]}</td>\n                    {\n                        range.map(n => <td>{n}</td>)\n                    }\n                </tr>\n                {tableData}\n            </thead>\n        </table>\n    );\n}","import React from 'react';\nimport { AppContainer } from './components/AppContainer';\nimport { HomeView } from './components/HomeView';\nimport { SelectView } from './components/SelectView';\nimport './App.css';\nimport { MathSessionTemplate, MathSessionOptions, SessionType, MathFuncs, SessionTypeNames, MathSessionResults } from './model/Math';\nimport { Data, StorageFuncs, Settings } from './model/Storage';\nimport { Util } from './model/Util';\nimport { MathView } from './components/MathView';\nimport { SettingsView } from './components/SettingsView';\nimport { StatsView } from './components/StatsView';\n\ntype AppView = 'home' | 'select' | 'math' | 'stats' | 'settings';\n\ntype AppProps = {\n\n}\n\ntype AppState = {\n    view: AppView,\n    data: Data,\n    sessionOptions: MathSessionOptions | null\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            view: 'home',\n            data: StorageFuncs.load(),\n            sessionOptions: null\n        }\n    }\n\n    // Update Data\n    updateData(data: Data) {\n        this.setState({\n            data\n        });\n        StorageFuncs.save(data);\n    }\n\n    // General handlers\n    handleNavigate(view: AppView) {\n        this.setState({\n            view\n        })\n    }\n\n    handleStartDefaultSession(type: SessionType) {\n        let options = MathFuncs.generateDefaultSessionOptions(type);\n        this.handleStartSession(options);\n    }\n\n    // Select View\n    handleTemplateAdd(template: MathSessionTemplate) {\n        let data = Util.clone(this.state.data);\n        data.templates.push(template);\n\n        this.updateData(data);\n    }\n\n    handleTemplateRemove(index: number) {\n        let data = Util.clone(this.state.data);\n        data.templates.splice(index, 1);\n\n        this.updateData(data);\n    }\n\n    handleStartSession(options: MathSessionOptions) {\n        let view: 'math' = 'math';\n        this.setState({\n            view,\n            sessionOptions: options\n        });\n    }\n\n    // Math Session View\n    handleFinishSession(result: MathSessionResults) {\n        alert(\"Finished session in \" + Util.formatSeconds(result.totalTime));\n\n        let data = this.state.data;\n        data.history.push(result);\n        this.setState({\n            view: 'stats',\n            data\n        });\n        this.updateData(data);\n    }\n\n    // Settings View\n    handleUpdateSettings(settings: Settings) {\n        let data = this.state.data;\n        data.settings = settings;\n        this.updateData(data);\n    }\n\n    handleImportData(text: string): boolean {\n        try {\n            let data = StorageFuncs.deserialize(text);\n            this.updateData(data);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    // ~~Blender~~ render\n    render() {\n        let data = this.state.data;\n        let sessionOptions = this.state.sessionOptions;\n        let settings = this.state.data.settings;\n\n        let child: React.ReactNode;\n        let title: string = \"\";\n        let showExit: boolean = false;\n        let onExit = () => this.handleNavigate('home');\n        let exitPrompt: string | null = null;\n\n        if (this.state.view === 'home') {\n            title = \"Math Practice\";\n            showExit = false;\n            child = <HomeView\n                onStartPractice={this.handleStartDefaultSession.bind(this)}\n                onNavigateSelectSession={() => this.handleNavigate('select')}\n                onNavigateStats={() => this.handleNavigate('stats')}\n                onNavigateSettings={() => this.handleNavigate('settings')}\n            />;\n        } else if (this.state.view === 'select') {\n            title = \"Custom Practice\";\n            showExit = true;\n            child = <SelectView\n                sessionTemplates={data.templates}\n                onAddSessionTemplate={this.handleTemplateAdd.bind(this)}\n                onRemoveSessionTemplate={this.handleTemplateRemove.bind(this)}\n                onStartSession={this.handleStartSession.bind(this)}\n            />\n        } else if (this.state.view === 'math') {\n            title = SessionTypeNames[sessionOptions!.type];\n            showExit = true;\n            exitPrompt = \"Are you sure you want to quit practice now?\";\n            child = <MathView\n                settings={settings}\n                options={sessionOptions!}\n                onFinishSession={this.handleFinishSession.bind(this)}\n            />\n        } else if (this.state.view === 'stats') {\n            title = \"User Statistics\";\n            showExit = true;\n            child = <StatsView\n                history={data.history} />\n        } else if (this.state.view === 'settings') {\n            title = \"Settings\";\n            showExit = true;\n            child = <SettingsView\n                data={data}\n                settings={settings}\n                onUpdateSettings={this.handleUpdateSettings.bind(this)}\n                onImportSettings={this.handleImportData.bind(this)}\n            />\n        }\n\n        return (\n            <AppContainer\n                title={title}\n                exitPrompt={exitPrompt}\n                onExit={onExit}\n                showExit={showExit}>\n                {child}\n            </AppContainer>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}