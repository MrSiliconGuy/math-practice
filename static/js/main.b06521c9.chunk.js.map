{"version":3,"sources":["components/cross.svg","components/AppContainer.tsx","model/Util.ts","model/Math.ts","model/Stats.ts","components/HomeView.tsx","components/SelectView.tsx","model/Storage.ts","components/MathView.tsx","components/SettingsView.tsx","components/StatsView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AppContainer","exit","this","props","exitPrompt","window","confirm","onExit","title","children","showExit","className","onClick","handleExit","bind","src","cross","alt","React","Component","Util","random","Math","randInt","min","max","undefined","floor","randChoice","arr","length","range","_","clone","obj","cloneDeep","shuffle","slice","i","j","extend","prop","plural","amount","text","formatSeconds","mills","round","formatDate","time","curTime","Date","getTime","days","months","date","diff","minutesAgo","hoursAgo","daysAgo","getDay","getMonth","getDate","MathOperators","SessionTypes","MathOperatorSymbols","SessionTypeNames","DefaultRange","MathFuncs","generateQuestion","num1","num2","oper","ans","Error","generateQuestionsRandom","type","pool","numQuestions","questions","question","push","generateQuestionsOrdered","generateSession","options","isDefault","useRange","order","timeStarted","times","progress","total","generateDefaultSessionOptions","generateSessionResults","session","totalTime","reduce","a","t","individual","generateSessionIndividualResults","includes","index1","index2","startSession","StatFuncs","filterType","history","filter","v","getLatestDefault","getHistorySorted","sort","h1","h2","getFastest","result","fastest","b","splice","getSlowest","slowest","getIndividualAverage","filtered","count","sum","res","HomeView","state","sessionType","onStartPractice","view","onNavigateSelectSession","onNavigateStats","onNavigateSettings","e","target","value","setState","handleStartClick","onChange","handleSelectType","map","key","handleNavigate","RangeControlTypes","RangeControlTypeNames","SelectView","rangeType","numberQuestions","onStartSession","index","template","sessionTemplates","name","prompt","onAddSessionTemplate","onRemoveSessionTemplate","parseInt","Number","isNaN","NaN","num","indexOf","rangeControls","orderControls","templates","pattern","handleInputRangeAmount","onBlur","handleValidateRangeAmount","handleToggleRangePool","n","checked","handleSelectNumberQuestions","handleToggleShuffle","SessionTemplate","onStart","handleStartSessionTemplate","onRemove","handleRemoveTemplate","handleSelectRangeType","handleToggleRandom","handleStartSession","handleSaveTemplate","DefaultData","version","settings","showProgressBar","StorageFuncs","verifyData","Array","isArray","serialize","data","JSON","stringify","lzString","compressToUTF16","deserialize","uncompress","decompressFromUTF16","parse","load","localStorage","getItem","save","setItem","MathView","input","setTimeout","startTime","elapsedTime","results","onFinishSession","curQuestion","placeholder","maxLength","size","handleInput","style","width","SettingsView","showImport","showExport","importText","onUpdateSettings","isImport","onImportSettings","keyCode","handleImportSettings","alert","dataSerialized","handleToggleShowProgressBar","handleImportExportToggle","handleClearData","readOnly","cols","rows","select","handleExportBlur","handleImportEdit","onKeyPress","handleImportSettingsKeypress","handleAboutClick","rel","href","StatsView","handleChangeView","RecentStats","TotalStats","IndividualStats","latest","child","timesSorted","concat","getColor","ratio","hue","tableData","backgroundColor","toFixed","App","sessionOptions","updateData","handleStartDefaultSession","handleTemplateAdd","handleTemplateRemove","handleFinishSession","handleUpdateSettings","handleImportData","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b06521c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross.b5d66db1.svg\";","import React from 'react';\nimport './AppContainer.css';\nimport cross from './cross.svg';\n\ntype AppContainerProps = {\n    title: string,\n    children: React.ReactNode,\n    showExit: boolean,\n    exitPrompt: string | null,\n    onExit: () => void\n}\n\nexport class AppContainer extends React.Component<AppContainerProps> {\n    handleExit() {\n        let exit = true;\n        if (this.props.exitPrompt !== null) {\n            exit = window.confirm(this.props.exitPrompt);\n        }\n        if (exit) {\n            this.props.onExit();\n        }\n    }\n\n    render() {\n        let title = this.props.title;\n        let children = this.props.children;\n        let showExit = this.props.showExit;\n        return <div className=\"AppContainer\">\n            <div className=\"AppContainer-topbar\">\n                <span>{title}</span>\n                {showExit ? (<button onClick={this.handleExit.bind(this)}>\n                    {<img src={cross} alt=\"X\"/>}\n                </button>) : null}\n            </div>\n            <div className=\"AppContainer-container\">\n                {children}\n            </div>\n        </div>;\n    }\n}","import _ from 'lodash';\n\nexport const Util = {\n    random(): number {\n        return Math.random();\n    },\n    randInt(min: number, max?: number): number {\n        if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return Math.floor(Util.random() * (max - min)) + min;\n    },\n    randChoice<T>(arr: T[]): T {\n        return arr[Util.randInt(0, arr.length)];\n    },\n    range(min: number, max: number) {\n        return _.range(min, max + 1);\n    },\n    clone<T>(obj: T): T {\n        return _.cloneDeep(obj);\n    },\n    shuffle<T>(arr: T[]): T[] {\n        arr = arr.slice();\n        for (let i = 0; i < arr.length; i++) {\n            let j = Util.randInt(0, arr.length);\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        return arr;\n    },\n    extend<TSource, TObj>(obj: TSource, prop: TObj): TSource & TObj {\n        return _.extend(obj, prop)\n    },\n    plural(amount: number, text: string) {\n        return amount + \" \" + text + (amount === 1 ? \"\" : \"s\");\n    },\n    formatSeconds(mills: number): string {\n        return Math.round(mills / 100) / 10 + \"s\";\n    },\n    formatDate(time: number, curTime: number = new Date().getTime()): string {\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        const months = [\"January\", \"Februrary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\",\n            \"October\", \"November\", \"December\"\n        ];\n\n        let date = new Date(time);\n        let diff = (curTime - time) / (1000 * 60); // Time difference in minutes\n        let minutesAgo = Math.round(diff);\n        let hoursAgo = Math.round(diff / 60);\n        let daysAgo = Math.round(diff / 60 / 24);\n\n        if (diff < 1 && diff > 0) {\n            return `Just now`;\n        } else if (diff < 60) {\n            return Util.plural(minutesAgo, \"minute\") + \" ago\";\n        } else if (diff < (60 * 24)) {\n            return Util.plural(hoursAgo, \"minute\") + \" ago\";\n        } else if (diff < (60 * 24 * 3)) {\n            return Util.plural(daysAgo, \"minute\") + \" ago\";\n        } else if (diff < (60 * 24 * 7)) {\n            return \"Last \" + days[date.getDay()] + \" (\" + Util.plural(daysAgo, \"day\") + \" ago)\";\n        } else {\n            return months[date.getMonth()] + \" \" + date.getDate() + \"(\" + Util.plural(daysAgo, \"days\") + \" ago)\";\n        }\n    }\n}","import { Util } from \"./Util\";\n\nexport type MathOperator = 'add' | 'sub' | 'mul' | 'div';\n\nexport const MathOperators: MathOperator[] = ['add', 'sub', 'mul', 'div'];\n\nexport type SessionType = MathOperator | 'mix' | 'sqr';\n\nexport const SessionTypes: SessionType[] = ['add', 'sub', 'mul', 'div', 'mix', 'sqr'];\n\nexport const MathOperatorSymbols = {\n    'add': '+',\n    'sub': '−',\n    'mul': '×',\n    'div': '÷'\n}\n\nexport const SessionTypeNames = {\n    'add': 'Addition',\n    'sub': 'Subtraction',\n    'mul': 'Multiplication',\n    'div': 'Division',\n    'mix': 'Mixed',\n    'sqr': 'Squares'\n}\n\nexport type MathQuestion = {\n    num1: number,\n    num2: number,\n    oper: MathOperator,\n    ans: number\n}\n\nexport type MathSession = {\n    timeStarted: number,\n    type: SessionType,\n    questions: MathQuestion[],\n    times: number[],\n    progress: number,\n    total: number,\n    isDefault: boolean,\n}\n\nexport type MathSessionOrder = 'all' | 'all-shuffle' | 'random';\n\nexport type MathSessionOptions = {\n    type: SessionType,\n    // Whether to use range or pool\n    useRange: boolean,\n    pool?: number[],\n    range?: { min: number, max: number },\n\n    // Run all questions, all but shuffled, or a random amount (uses numQuestions)\n    order: MathSessionOrder,\n    numQuestions?: number,\n\n    // Whether or not this is a default session\n    isDefault: boolean\n}\n\nexport type MathSessionTemplate = {\n    options: MathSessionOptions,\n    name: string\n}\n\nexport type MathSessionResults = {\n    date: number,\n    type: SessionType,\n    totalTime: number,\n    numQuestions: number,\n    individual?: MathSessionIndividualResults\n}\n\nexport type MathSessionIndividualResults = {\n    oper: MathOperator,\n    range: { min: number, max: number }\n    times: number[][]\n}\n\nexport const DefaultRange = {\n    min: 1,\n    max: 12\n}\n\nexport const MathFuncs = {\n    generateQuestion(num1: number, num2: number, oper: MathOperator): MathQuestion {\n        if (oper === 'add') {\n            return {\n                num1, num2, oper, ans: num1 + num2\n            }\n        } else if (oper === 'sub') {\n            return {\n                num1: num1 + num2, num2, oper, ans: num1\n            }\n        } else if (oper === 'mul') {\n            return {\n                num1, num2, oper, ans: num1 * num2\n            }\n        } else if (oper === 'div') {\n            return {\n                num1: num1 * num2, num2, oper, ans: num1\n            }\n        }\n        throw Error();\n    },\n    generateQuestionsRandom(type: SessionType, pool: number[], numQuestions: number): MathQuestion[] {\n        let num1: number;\n        let num2: number;\n        let oper: MathOperator;\n        let questions: MathQuestion[] = [];\n        for (let i = 0; i < numQuestions; i++) {\n            if (type === \"mix\") {\n                oper = Util.randChoice(MathOperators);\n                num1 = Util.randChoice(pool);\n                num2 = Util.randChoice(pool);\n            } else if (type === \"sqr\") {\n                oper = 'mul';\n                num1 = Util.randChoice(pool);\n                num2 = num1;\n            } else {\n                oper = type;\n                num1 = Util.randChoice(pool);\n                num2 = Util.randChoice(pool);\n            }\n            let question = MathFuncs.generateQuestion(num1, num2, oper);\n            questions.push(question);\n        }\n        return questions;\n    },\n    generateQuestionsOrdered(type: SessionType, pool: number[]): MathQuestion[] {\n        let num1: number;\n        let num2: number;\n        let oper: MathOperator;\n        let questions: MathQuestion[] = [];\n        for (let i = 0; i < pool.length; i++) {\n            for (let j = 0; j < pool.length; j++) {\n                if (type === \"mix\") {\n                    oper = Util.randChoice(MathOperators);\n                    num1 = pool[i];\n                    num2 = pool[j];\n                } else if (type === \"sqr\") {\n                    oper = \"mul\";\n                    num1 = pool[i];\n                    num2 = pool[j];\n                    if (num1 !== num2) {\n                        continue;\n                    }\n                } else {\n                    oper = type;\n                    num1 = pool[i];\n                    num2 = pool[j];\n                }\n                let question = MathFuncs.generateQuestion(num1, num2, oper);\n                questions.push(question);\n            }\n        }\n        return questions;\n    },\n    generateSession(options: MathSessionOptions): MathSession {\n        let type = options.type;\n        let questions: MathQuestion[] = [];\n        let timeStarted = 0;\n        let times: number[] = [];\n        let progress = 0;\n        let total: number;\n        let isDefault = options.isDefault;\n\n        let pool: number[];\n        if (options.useRange) {\n            pool = Util.range(options.range!.min, options.range!.max);\n        } else {\n            pool = Util.clone(options.pool!);\n        }\n\n        // Generate Questions\n        if (options.order === \"random\") {\n            questions = MathFuncs.generateQuestionsRandom(type, pool, options.numQuestions!);\n        } else if (options.order === \"all\") {\n            questions = MathFuncs.generateQuestionsOrdered(type, pool);\n        } else if (options.order === \"all-shuffle\") {\n            questions = MathFuncs.generateQuestionsOrdered(type, pool);\n            questions = Util.shuffle(questions);\n        }\n        total = questions.length;\n\n        return {\n            timeStarted,\n            type,\n            questions,\n            times,\n            progress,\n            total,\n            isDefault\n        }\n    },\n    generateDefaultSessionOptions(type: SessionType): MathSessionOptions {\n        let useRange = true;\n        let range = Util.clone(DefaultRange);\n        let order: \"all-shuffle\" = \"all-shuffle\";\n        return {\n            type,\n            useRange,\n            range,\n            order,\n            isDefault: true\n        };\n    },\n    generateSessionResults(session: MathSession): MathSessionResults {\n        let date = session.timeStarted;\n        let type = session.type;\n        let totalTime = session.times.reduce((a, t) => a + t, 0)\n        let individual = MathFuncs.generateSessionIndividualResults(session);\n        let numQuestions = session.total;\n        return {\n            date,\n            type,\n            totalTime,\n            numQuestions,\n            individual\n        };\n    },\n    generateSessionIndividualResults(session: MathSession): MathSessionIndividualResults | undefined {\n        // Only default math sessions where the session type is a math operator\n        // are allowed\n        if (!session.isDefault || !MathOperators.includes(session.type as MathOperator)) {\n            return;\n        }\n        let oper = session.type as MathOperator;\n        let range = Util.clone(DefaultRange);\n        let times: number[][] = [];\n        for (let i = range.min; i <= range.max; i++) {\n            let arr: number[] = []\n            for (let j = range.min; j <= range.max; j++) {\n                arr.push(0);\n            }\n            times.push(arr);\n        }\n        for (let i = 0; i < session.questions.length; i++) {\n            let question = session.questions[i];\n            let time = session.times[i];\n            let num1: number, num2: number;\n            if (['sub', 'div'].includes(question.oper)) {\n                num1 = question.ans;\n                num2 = question.num2;\n            } else {\n                num1 = question.num1;\n                num2 = question.num2;\n            }\n            let index1 = num1 - range.min;\n            let index2 = num2 - range.min;\n            times[index1][index2] = time;\n        }\n\n        return {\n            oper,\n            range,\n            times\n        };\n    },\n    startSession(session: MathSession): MathSession {\n        session.timeStarted = new Date().getTime();\n        return session;\n    }\n}","import { SessionType, MathSessionResults, MathQuestion, MathOperator, MathFuncs, DefaultRange } from \"./Math\";\n\ntype QuestionTime = {\n    question: MathQuestion\n    time: number\n}\n\nexport const StatFuncs = {\n    filterType(history: MathSessionResults[], type: SessionType): MathSessionResults[] {\n        return history.filter(v => v.type === type);\n    },\n    getLatestDefault(history: MathSessionResults[], type: SessionType): MathSessionResults | null {\n        for (let i = history.length - 1; i >= 0; i--) {\n            if (history[i].type === type) {\n                return history[i];\n            }\n        }\n        return null;\n    },\n    getHistorySorted(history: MathSessionResults[]): MathSessionResults[] {\n        return history.slice().sort((h1, h2) => h1.date - h2.date);\n    },\n    getFastest(result: MathSessionResults, amount: number): QuestionTime[] {\n        let individual = result.individual!;\n        let fastest: QuestionTime[] = [];\n        // Loop over each time\n        for (let i = 0; i < individual.times.length; i++) {\n            for (let j = 0; j < individual.times.length; j++) {\n                let time = individual.times[i][j];\n                // Add if it is faster than the slowest in the list\n                if (fastest.length < amount || fastest[fastest.length - 1].time > time) {\n                    fastest.push({\n                        question:\n                            MathFuncs.generateQuestion(i + individual.range.min,\n                                j + individual.range.min, result.type as MathOperator),\n                        time: time\n                    });\n                    fastest.sort((a, b) => a.time - b.time);\n                    fastest.splice(amount);\n                }\n            }\n        }\n        return fastest;\n    },\n    getSlowest(result: MathSessionResults, amount: number): QuestionTime[] {\n        let individual = result.individual!;\n        let slowest: QuestionTime[] = [];\n        for (let i = 0; i < individual.times.length; i++) {\n            for (let j = 0; j < individual.times.length; j++) {\n                let time = individual.times[i][j];\n                if (slowest.length < amount || slowest[slowest.length - 1].time < time) {\n                    slowest.push({\n                        question:\n                            MathFuncs.generateQuestion(i + individual.range.min,\n                                j + individual.range.min, result.type as MathOperator),\n                        time: time\n                    });\n                    slowest.sort((a, b) => b.time - a.time);\n                    slowest.splice(amount);\n                }\n            }\n        }\n        return slowest;\n    },\n    getIndividualAverage(history: MathSessionResults[], type: SessionType,\n        num1: number, num2: number, amount: number): number | null {\n\n        let filtered = StatFuncs.filterType(history, type);\n        let count = 0;\n        let sum = 0;\n        for (const res of filtered) {\n            if (res.individual !== undefined) {\n                count += 1;\n                sum += res.individual.times[num1 - DefaultRange.min][num2 - DefaultRange.min];\n            }\n        }\n\n        if (count === 0) {\n            return null;\n        } else {\n            return sum / count;\n        }\n    }\n}","import React from 'react';\nimport { SessionType, SessionTypes, SessionTypeNames, MathSessionResults } from '../model/Math';\nimport './HomeView.css';\nimport { StatFuncs } from '../model/Stats';\n\ntype HomeViewProps = {\n    history: MathSessionResults[],\n    onStartPractice: (type: SessionType) => void,\n    onNavigateSelectSession: () => void,\n    onNavigateStats: () => void,\n    onNavigateSettings: () => void\n}\n\ntype HomeViewState = {\n    sessionType: SessionType,\n}\n\nexport class HomeView extends React.Component<HomeViewProps, HomeViewState> {\n    constructor(props: HomeViewProps) {\n        super(props);\n        let history = StatFuncs.getHistorySorted(props.history);\n        let type: SessionType;\n        if (history.length === 0) {\n            type = \"add\"\n        } else {\n            type = history[history.length - 1].type;\n        }\n        this.state = {\n            sessionType: type\n        }\n    }\n\n    handleStartClick() {\n        this.props.onStartPractice(this.state.sessionType);\n    }\n\n    handleNavigate(view: 'select' | 'stats' | 'settings') {\n        if (view === 'select') {\n            this.props.onNavigateSelectSession();\n        } else if (view === 'stats') {\n            this.props.onNavigateStats();\n        } else {\n            this.props.onNavigateSettings();\n        }\n    }\n\n    handleSelectType(e: React.ChangeEvent) {\n        let sessionType = (e.target as HTMLSelectElement).value as SessionType;\n        this.setState({\n            sessionType\n        })\n    }\n\n    render() {\n        let sessionType = this.state.sessionType;\n        return (\n            <div className=\"Home\">\n                <button className=\"Home-start\" onClick={this.handleStartClick.bind(this)}>Start<br />Practice</button>\n                <select className=\"Home-start-type\" value={sessionType} onChange={this.handleSelectType.bind(this)}>\n                    {\n                        SessionTypes.map(t => <option value={t} key={t}>\n                            {SessionTypeNames[t]}\n                        </option>)\n                    }\n                </select>\n                <span className=\"link\" onClick={() => this.handleNavigate('select')}>\n                    Custom Session\n                </span>\n                <span className=\"link\" onClick={() => this.handleNavigate('stats')}>\n                    User Stats\n                </span>\n                <span className=\"link\" onClick={() => this.handleNavigate('settings')}>\n                    Settings\n                </span>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { MathSessionTemplate, MathSessionOptions, SessionType, SessionTypes, SessionTypeNames } from '../model/Math';\nimport { Util } from '../model/Util';\nimport './SelectView.css';\nimport cross from './cross.svg';\n\ntype RangeControlType = \"range\" | \"pool\";\n\nconst RangeControlTypes: RangeControlType[] = [\"range\", \"pool\"];\n\nconst RangeControlTypeNames = {\n    \"range\": \"Range\",\n    \"pool\": \"Pool\"\n}\n\ntype SelectViewProps = {\n    sessionTemplates: MathSessionTemplate[],\n    onStartSession: (options: MathSessionOptions) => void,\n    onAddSessionTemplate: (template: MathSessionTemplate) => void,\n    onRemoveSessionTemplate: (index: number) => void,\n}\n\ntype SelectViewState = {\n    rangeType: RangeControlType,\n    range: { min: number, max: number },\n    pool: number[],\n    type: SessionType,\n    shuffle: boolean,\n    random: boolean,\n    numberQuestions: number\n}\n\nexport class SelectView extends React.Component<SelectViewProps, SelectViewState> {\n    constructor(props: SelectViewProps) {\n        super(props);\n        this.state = {\n            rangeType: \"range\",\n            range: { min: 1, max: 12 },\n            pool: Util.range(1, 12),\n            type: \"add\",\n            shuffle: true,\n            random: false,\n            numberQuestions: 20\n        }\n    }\n\n    handleStartSession() {\n        this.props.onStartSession({\n            type: this.state.type,\n            useRange: this.state.rangeType === \"range\",\n            range: this.state.range,\n            pool: this.state.pool,\n            order: this.state.random ? \"random\" :\n                this.state.shuffle ? \"all-shuffle\" : \"all\",\n            numQuestions: this.state.numberQuestions,\n            isDefault: false\n        });\n    }\n\n    handleStartSessionTemplate(index: number) {\n        let template = this.props.sessionTemplates[index];\n        this.props.onStartSession(template.options);\n    }\n\n    handleSaveTemplate() {\n        let options: MathSessionOptions = {\n            type: this.state.type,\n            useRange: this.state.rangeType === \"range\",\n            range: this.state.range,\n            pool: this.state.pool,\n            order: this.state.random ? \"random\" :\n                this.state.shuffle ? \"all-shuffle\" : \"all\",\n            numQuestions: this.state.numberQuestions,\n            isDefault: false\n        }\n        let name = window.prompt(\"Please enter a name for your session:\");\n        if (name === null) {\n            return;\n        }\n        this.props.onAddSessionTemplate({\n            options,\n            name\n        })\n    }\n\n    handleRemoveTemplate(index: number) {\n        this.props.onRemoveSessionTemplate(index);\n    }\n\n    handleSelectRangeType(e: React.ChangeEvent) {\n        let rangeType = (e.target as HTMLSelectElement).value as RangeControlType;\n        this.setState({ rangeType });\n    }\n\n    handleInputRangeAmount(e: React.ChangeEvent, min: boolean) {\n        let value = parseInt((e.target as HTMLInputElement).value, 10);\n        if (value < 0) {\n            value = 1;\n        }\n        let range = Util.clone(this.state.range);\n        if (min) {\n            range.min = value;\n        } else {\n            range.max = value;\n        }\n        this.setState({\n            range\n        });\n    }\n\n    handleValidateRangeAmount(e: React.ChangeEvent, min: boolean) {\n        let value = parseInt((e.target as HTMLInputElement).value, 10);\n        if (Number.isNaN(value)) {\n            value = NaN\n        }\n        value = Math.min(Math.max(value, 1), 1000);\n        let range = Util.clone(this.state.range);\n        if (min) {\n            range.min = value;\n            if (range.max < range.min) {\n                range.max = range.min;\n            }\n        } else {\n            range.max = value;\n            if (range.min > range.max) {\n                range.min = range.max\n            }\n        }\n        this.setState({\n            range\n        });\n    }\n\n    handleToggleRangePool(num: number) {\n        let pool = this.state.pool\n        let index = pool.indexOf(num);\n        if (index === -1) {\n            pool.push(num);\n        } else {\n            pool.splice(index, 1);\n        }\n        this.setState({ pool });\n    }\n\n    handleSelectType(e: React.ChangeEvent) {\n        let type = (e.target as HTMLSelectElement).value as SessionType;\n        this.setState({ type });\n    }\n\n    handleToggleShuffle() {\n        this.setState({\n            shuffle: !this.state.shuffle\n        });\n    }\n\n    handleToggleRandom() {\n        this.setState({\n            random: !this.state.random\n        });\n    }\n\n    handleSelectNumberQuestions(numberQuestions: number) {\n        this.setState({\n            numberQuestions\n        });\n    }\n\n    render() {\n        let templates = this.props.sessionTemplates;\n        let rangeType = this.state.rangeType;\n        let range = this.state.range;\n        let pool = this.state.pool;\n        let type = this.state.type;\n        let random = this.state.random;\n        let shuffle = this.state.shuffle;\n        let numberQuestions = this.state.numberQuestions;\n\n        let rangeControls: React.ReactNode;\n        if (rangeType === \"range\") {\n            rangeControls = <div className=\"Select-range-range\">\n                <input type=\"number\" pattern=\"[0-9]*\"\n                    min={1}\n                    value={Number.isNaN(range.min) ? \"\" : range.min}\n                    onChange={e => this.handleInputRangeAmount(e, true)}\n                    onBlur={e => this.handleValidateRangeAmount(e, true)} />\n                <input type=\"number\" pattern=\"[0-9]*\"\n                    min={1}\n                    value={Number.isNaN(range.max) ? \"\" : range.max}\n                    onChange={e => this.handleInputRangeAmount(e, false)}\n                    onBlur={e => this.handleValidateRangeAmount(e, false)} />\n            </div>\n        } else if (rangeType === \"pool\") {\n            rangeControls = <div className=\"Select-range-pool\">{\n                Util.range(1, 20).map(i =>\n                    <button key={i}\n                        className={\"Select-range-pool-button \" +\n                            (pool.includes(i) ? \"Select-range-pool-button-selected\" : \"\")}\n                        onClick={() => this.handleToggleRangePool(i)}>\n                        {i}\n                    </button>)\n            }</div>\n        }\n\n        let orderControls: React.ReactNode;\n        if (random) {\n            orderControls = <div className=\"Select-order-random\">\n                {\n                    [20, 50, 100].map(n => [\n                        <input type=\"radio\" value={n}\n                            checked={n === numberQuestions}\n                            onChange={() => this.handleSelectNumberQuestions(n)} />,\n                        <label\n                            onClick={() => this.handleSelectNumberQuestions(n)}>{n} Questions</label>,\n                        <br />\n                    ])\n                }\n            </div>\n        } else {\n            orderControls = <div className=\"Select-order-shuffle\">\n                <input type=\"checkbox\" checked={shuffle}\n                    onChange={this.handleToggleShuffle.bind(this)} />\n                <label\n                    onClick={this.handleToggleShuffle.bind(this)}>Shuffle?</label>\n            </div>\n        }\n\n        return (\n            <div className=\"Select\">\n                <div className=\"Select-templates\">\n                    {\n                        templates.map((t, i) =>\n                            <SessionTemplate\n                                name={t.name}\n                                key={t.name}\n                                onStart={() => this.handleStartSessionTemplate(i)}\n                                onRemove={() => this.handleRemoveTemplate(i)}\n                            />\n                        )\n                    }\n                </div>\n                <div className=\"Select-options\">\n                    <div className=\"Select-rangetype\">\n                        <select value={rangeType} onChange={this.handleSelectRangeType.bind(this)}>\n                            {\n                                RangeControlTypes.map(t =>\n                                    <option key={t} value={t}>{RangeControlTypeNames[t]}</option>)\n                            }\n                        </select>\n                    </div>\n                    {rangeControls}\n                    <div className=\"Select-type\">\n                        <span>Type: </span>\n                        <select value={type} onChange={this.handleSelectType.bind(this)}>\n                            {\n                                SessionTypes.map(t =>\n                                    <option key={t} value={t}>{SessionTypeNames[t]}</option>)\n                            }\n                        </select>\n                    </div>\n                    <div className=\"Select-order\">\n                        <input type=\"checkbox\" checked={random}\n                            onChange={this.handleToggleRandom.bind(this)} />\n                        <label onClick={this.handleToggleRandom.bind(this)}>\n                            Random?\n                        </label>\n                    </div>\n                    {orderControls}\n                    <div className=\"Select-submit\">\n                        <button onClick={this.handleStartSession.bind(this)}>Start Practice</button>\n                        <span className=\"link\" onClick={this.handleSaveTemplate.bind(this)}>Save Settings</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype SessionTemplateProps = {\n    name: string,\n    onStart: () => void,\n    onRemove: () => void\n}\n\nexport function SessionTemplate(props: SessionTemplateProps) {\n    return (<div className=\"SessionTemplate\">\n        <button className=\"SessionTemplate-start\" onClick={props.onStart}>Start</button>\n        <span className=\"SessionTemplate-name\">{props.name}</span>\n        <button className=\"SessionTemplate-remove\" onClick={props.onRemove}>{<img src={cross} alt=\"X\" />}</button>\n    </div>);\n}","import { MathSessionTemplate, MathSessionResults } from \"./Math\";\nimport lzString from \"lz-string\";\nimport { Util } from \"./Util\";\n\nconst version = \"v0.1.0\";\n\nexport type Settings = {\n    showProgressBar: boolean\n}\n\nconst defaultSettings: Settings = {\n    showProgressBar: false\n}\n\nexport type Data = {\n    version: string,\n    history: MathSessionResults[],\n    templates: MathSessionTemplate[],\n    settings: Settings\n}\n\nexport const DefaultData: Data = {\n    version,\n    history: [],\n    templates: [],\n    settings: defaultSettings\n}\n\nexport const StorageFuncs = {\n    verifyData(obj: any): obj is Data {\n        return (typeof obj === \"object\") &&\n            (obj.version !== undefined) &&\n            (obj.version === version) &&\n            (obj.history !== undefined) &&\n            (Array.isArray(obj.history)) &&\n            (obj.templates !== undefined) &&\n            (Array.isArray(obj.templates)) &&\n            (obj.settings !== undefined) &&\n            (typeof obj.settings === \"object\");\n    },\n    serialize(data: Data): string {\n        let text = JSON.stringify(data);\n        let compress = lzString.compressToUTF16(text);\n        return compress;\n    },\n    deserialize(text: string): Data {\n        let uncompress = lzString.decompressFromUTF16(text);\n        let data = JSON.parse(uncompress);\n        if (this.verifyData(data)) {\n            return data;\n        } else {\n            throw Error(\"Could not parse data\");\n        }\n    },\n    load(): Data {\n        let text = window.localStorage.getItem(version);\n        if (text === null) {\n            return Util.clone(DefaultData);\n        } else {\n            return StorageFuncs.deserialize(text);\n        }\n    },\n    async save(data: Data) {\n        let text = StorageFuncs.serialize(data);\n        window.localStorage.setItem(version, text);\n    }\n}","import React from 'react';\nimport { MathSession, MathFuncs, MathSessionOptions, MathOperatorSymbols, MathSessionResults } from '../model/Math';\nimport { Settings } from '../model/Storage';\nimport './MathView.css';\n\ntype MathViewProps = {\n    options: MathSessionOptions,\n    settings: Settings,\n    onFinishSession: (results: MathSessionResults) => void\n}\n\ntype MathViewState = {\n    input: number | null,\n    session: MathSession\n}\n\n\nexport class MathView extends React.Component<MathViewProps, MathViewState> {\n    constructor(props: MathViewProps) {\n        super(props);\n        let session = MathFuncs.generateSession(props.options);\n        MathFuncs.startSession(session);\n        this.state = {\n            session,\n            input: null\n        }\n    }\n\n    handleInput(e: React.FormEvent) {\n        // Skip if already finished somehow\n        if (this.state.session.progress === this.state.session.total) {\n            return;\n        }\n\n        let value = (e.target as HTMLInputElement).value as string;\n        let num = parseInt(value, 10);\n\n        let input = this.state.input;\n        input = Number.isNaN(num) ? null : num;\n\n        this.setState({ input }, () => setTimeout(() => {\n            let session = this.state.session;\n            // Skip if already finished somehow\n            if (this.state.session.progress === this.state.session.total) {\n                return;\n            }\n\n            if (input === session.questions[session.progress].ans) {\n                let input = null;\n                let startTime = session.timeStarted;\n                let totalTime = session.times.reduce((v, t) => v + t, 0);\n                let currentTime = new Date().getTime()\n                let elapsedTime = currentTime - startTime - totalTime;\n                // Cap at 9.9s per question\n                elapsedTime = Math.min(elapsedTime, 9900);\n                session.times.push(elapsedTime);\n                session.progress += 1;\n                if (session.progress === session.total) {\n                    let results = MathFuncs.generateSessionResults(session);\n                    this.props.onFinishSession(results)\n                } else {\n                    this.setState({\n                        session,\n                        input\n                    });\n                }\n            }\n        }, 100));\n    }\n\n    render() {\n        let settings = this.props.settings;\n        let input = this.state.input;\n        let session = this.state.session;\n        let curQuestion = session.questions[session.progress];\n\n        return (\n            <div className=\"Math\">\n                <div className=\"Math-session\">\n                    <div className=\"Math-question\">\n                        <span className=\"Math-oper\">{MathOperatorSymbols[curQuestion.oper]}</span>\n                        <div className=\"Math-numbers\">\n                            <span>{curQuestion.num1}</span>\n                            <span>{curQuestion.num2}</span>\n                        </div>\n                    </div>\n                    <div className=\"Math-answer\">\n                        <input\n                            placeholder=\"?\"\n                            maxLength={3}\n                            size={3}\n                            value={input ?? \"\"}\n                            onChange={this.handleInput.bind(this)}\n                            type=\"number\" />\n                    </div>\n                </div>\n                {\n                    settings.showProgressBar ?\n                        <div className=\"Math-progress\">\n                            <div style={{ width: (session.progress / session.total * 100) + \"%\" }}></div>\n                        </div> : null\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Settings, Data, StorageFuncs, DefaultData } from '../model/Storage';\nimport './SettingsView.css'\n\ntype SettingsViewProps = {\n    data: Data,\n    settings: Settings,\n    onUpdateSettings: (settings: Settings) => void,\n    onImportSettings: (text: string) => boolean,\n}\n\ntype SettingsViewState = {\n    showImport: boolean,\n    showExport: boolean,\n    importText: string\n}\n\nexport class SettingsView extends React.Component<SettingsViewProps, SettingsViewState> {\n    constructor(props: SettingsViewProps) {\n        super(props);\n        this.state = {\n            showImport: false,\n            showExport: false,\n            importText: \"\"\n        }\n    }\n\n    handleToggleShowProgressBar() {\n        let settings = this.props.settings;\n        settings.showProgressBar = !settings.showProgressBar;\n        this.props.onUpdateSettings(settings);\n    }\n\n    handleImportExportToggle(isImport: boolean) {\n        let showImport = this.state.showImport;\n        let showExport = this.state.showExport;\n        if (isImport) {\n            showImport = !showImport;\n            showExport = false;\n        } else {\n            showImport = false;\n            showExport = !showExport;\n        }\n        this.setState({\n            showImport,\n            showExport\n        })\n    }\n\n    handleExportBlur() {\n        this.setState({\n            showImport: false,\n            showExport: false\n        })\n    }\n\n    handleImportEdit(e: React.SyntheticEvent) {\n        let importText = (e.target as HTMLTextAreaElement).value;\n        this.setState({\n            importText: importText\n        });\n    }\n\n    handleImportSettings(e: React.SyntheticEvent) {\n        let text = (e.target as HTMLTextAreaElement).value;\n        if (text === \"\") {\n            return;\n        }\n        let res = this.props.onImportSettings(text);\n        if (res) {\n            this.setState({\n                importText: \"Successfully imported data!\"\n            }, () => {\n                setTimeout(() => {\n                    this.setState({\n                        showImport: false,\n                        showExport: false\n                    });\n                }, 5000);\n            });\n        } else {\n            this.setState({\n                importText: \"Invalid input\"\n            });\n        }\n    }\n\n    handleImportSettingsKeypress(e: React.KeyboardEvent) {\n        if (e.keyCode === 13) {\n            this.handleImportSettings(e);\n        }\n    }\n\n    handleClearData() {\n        if (window.confirm(\"Are you sure you want to delete all your session data?\\n(This cannot be undone)\")) {\n            this.props.onImportSettings(StorageFuncs.serialize(DefaultData));\n        }\n    }\n\n    handleAboutClick() {\n        alert(\"Math Practice was coded by MrSiliconGuy\\nwith the React.js framework\");\n    }\n\n    render() {\n        let settings = this.props.settings;\n        let showImport = this.state.showImport;\n        let showExport = this.state.showExport;\n        let dataSerialized = StorageFuncs.serialize(this.props.data);\n        return <div className=\"Settings\">\n            <fieldset className=\"Settings-fieldset\">\n                <legend>Math Session</legend>\n                <input\n                    type=\"checkbox\"\n                    checked={settings.showProgressBar}\n                    onChange={this.handleToggleShowProgressBar.bind(this)} />\n                <label onClick={this.handleToggleShowProgressBar.bind(this)}>Show Progress Bar</label>\n            </fieldset>\n            <fieldset className=\"Settings-fieldset\">\n                <legend>Import/Export</legend>\n                <span\n                    className=\"link\"\n                    onClick={() => this.handleImportExportToggle(true)}>Import</span>\n                <span\n                    className=\"link\"\n                    onClick={() => this.handleImportExportToggle(false)}>Export</span>\n                <span\n                    className=\"link\"\n                    onClick={this.handleClearData.bind(this)}>Clear Data</span><br />\n                {\n                    showExport ? (\n                        <textarea\n                            readOnly={true}\n                            cols={25}\n                            rows={4}\n                            className=\"Settings-import-export-box\"\n                            onClick={e => (e.target as HTMLTextAreaElement).select()}\n                            onBlur={this.handleExportBlur.bind(this)}\n                            value={dataSerialized}></textarea>\n                    ) : showImport ? (\n                        <textarea\n                            cols={25}\n                            rows={4}\n                            onClick={e => (e.target as HTMLTextAreaElement).select()}\n                            onChange={this.handleImportEdit.bind(this)}\n                            onKeyPress={this.handleImportSettingsKeypress.bind(this)}\n                            onBlur={this.handleImportSettings.bind(this)}\n                            className=\"Settings-import-export-box\"\n                            value={this.state.importText}\n                        ></textarea>\n                    ) : null\n                }\n            </fieldset>\n            <fieldset className=\"Settings-fieldset\">\n                <legend>Other</legend>\n                <span\n                    className=\"link\"\n                    onClick={this.handleAboutClick.bind(this)}>About</span>\n                <a\n                    className=\"link\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://www.github.com/mrsiliconguy/math-practice\">GitHub</a>\n            </fieldset>\n        </div>\n    }\n}","import React from 'react';\nimport { SessionType, MathSessionResults, SessionTypes, SessionTypeNames, MathOperatorSymbols, DefaultRange, MathOperator, MathOperators } from '../model/Math';\nimport { StatFuncs } from '../model/Stats';\nimport { Util } from '../model/Util';\nimport './StatsView.css';\n\ntype StatsViewProps = {\n    history: MathSessionResults[]\n}\n\ntype StatsViewState = {\n    history: MathSessionResults[],\n    view: SessionType\n}\n\nexport class StatsView extends React.Component<StatsViewProps, StatsViewState> {\n    constructor(props: StatsViewProps) {\n        super(props);\n        this.state = {\n            history: StatFuncs.getHistorySorted(props.history),\n            view: 'add'\n        };\n    }\n\n    handleChangeView(e: React.ChangeEvent) {\n        let view = (e.target as HTMLSelectElement).value as SessionType;\n        this.setState({\n            view\n        });\n    }\n\n    render() {\n        let view = this.state.view;\n        let history = this.state.history;\n        return (\n            <div className=\"StatsView\">\n                <select value={view} onChange={this.handleChangeView.bind(this)}>\n                    {\n                        SessionTypes.map(t =>\n                            <option key={t} value={t}>{SessionTypeNames[t]}</option>)\n                    }\n                </select>\n                <span>{SessionTypeNames[view]} Attempts: {StatFuncs.filterType(history, view).length}</span>\n                <span>Total Attempts: {history.length}</span>\n                <div className=\"StatsView-tables\">\n                    <RecentStats {...this.state} />\n                    <TotalStats {...this.state} />\n                    {\n                        MathOperators.includes(view as MathOperator) ? (\n                            <IndividualStats {...this.state} />\n                        ) : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function RecentStats(props: StatsViewState) {\n    let history = props.history;\n    let latest = StatFuncs.getLatestDefault(history, props.view);\n\n    let child = (latest === null || latest.individual === undefined) ? null : (\n        <tr>\n            <td>\n                <b>Fastest Times:</b>\n                <ul>\n                    {\n                        StatFuncs.getFastest(latest, 5).map((v, i) =>\n                            <li key={i}>\n                                {v.question.num1 + MathOperatorSymbols[v.question.oper] + v.question.num2 +\n                                    \" - \" + Util.formatSeconds(v.time)}\n                            </li>)\n                    }\n                </ul>\n            </td>\n            <td>\n                <b>Slowest Times:</b>\n                <ul>\n                    {\n                        StatFuncs.getSlowest(latest, 5).map((v, i) =>\n                            <li key={i}>\n                                {v.question.num1 + MathOperatorSymbols[v.question.oper] + v.question.num2 +\n                                    \" - \" + Util.formatSeconds(v.time)}\n                            </li>)\n                    }\n                </ul>\n            </td>\n        </tr>);\n    return (<table className=\"RecentStats\">\n        <caption>Latest Session:</caption>\n        <thead>\n            <tr>\n                <th>Date</th>\n                <th>Time</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>{latest === null ? \"None\" :\n                    Util.formatDate(latest.date)}</td>\n                <td>{latest === null ? \"None\" :\n                    Util.formatSeconds(latest.totalTime)}</td>\n            </tr>\n            {child}\n        </tbody>\n    </table>);\n}\n\nexport function TotalStats(props: StatsViewState) {\n    let history = props.history;\n    let filtered = StatFuncs.filterType(history, props.view);\n    return (<table className=\"TotalStats\">\n        <caption>All Sessions</caption>\n        <thead>\n            <tr>\n                <th>&nbsp;</th>\n                <th>Date</th>\n                <th>Time</th>\n                <th>Questions</th>\n            </tr>\n        </thead>\n        <tbody> {\n            filtered.map((t, i) =>\n                <tr key={i}>\n                    <td>{i + 1})</td>\n                    <td>{Util.formatDate(t.date)}</td>\n                    <td>{Util.formatSeconds(t.totalTime)}</td>\n                    <td>{t.individual !== undefined ? \"default\" : t.numQuestions}</td>\n                </tr>)\n        }\n        </tbody>\n    </table>);\n}\n\nexport function IndividualStats(props: StatsViewState) {\n    let history = props.history;\n    let oper = props.view as MathOperator;\n    let range = Util.range(DefaultRange.min, DefaultRange.max);\n    let times = range.map(i => range.map(j => StatFuncs.getIndividualAverage(history, oper, i, j, 5)));\n    let timesSorted = times.reduce((arr, times) => arr.concat(times), []).sort((a, b) => b! - a!);\n    let getColor = (time: number | null) => {\n        if (time === null) {\n            return \"#777777\";\n        }\n        let index = timesSorted.indexOf(time);\n        let ratio = index / timesSorted.length;\n        let hue = Math.round(ratio * 160);\n        return `hsl(${hue}, 100%, 50%)`;\n    }\n\n    let tableData = range.map(i => (\n        <tr>\n            <th className=\"IndividualStats-header\">{i}</th>\n            {\n                range.map(j => (() => {\n                    let curTime = times[i - DefaultRange.min][j - DefaultRange.min];\n                    return <td className=\"IndividualStats-data\" style={{ backgroundColor: getColor(curTime) }}>\n                        {curTime === null ? \"N/A\" : (curTime / 1000).toFixed(1)}\n                    </td>\n                })())\n            }\n        </tr>\n    ));\n\n    return (\n        <table className=\"IndividualStats\">\n            <caption>Individual Stats (Average of 5)</caption>\n            <thead>\n                <tr>\n                    <th>{MathOperatorSymbols[oper]}</th>\n                    {\n                        range.map(n => <th>{n}</th>)\n                    }\n                </tr>\n                {tableData}\n            </thead>\n        </table>\n    );\n}","import React from 'react';\nimport { AppContainer } from './components/AppContainer';\nimport { HomeView } from './components/HomeView';\nimport { SelectView } from './components/SelectView';\nimport './App.css';\nimport { MathSessionTemplate, MathSessionOptions, SessionType, MathFuncs, SessionTypeNames, MathSessionResults } from './model/Math';\nimport { Data, StorageFuncs, Settings } from './model/Storage';\nimport { Util } from './model/Util';\nimport { MathView } from './components/MathView';\nimport { SettingsView } from './components/SettingsView';\nimport { StatsView } from './components/StatsView';\n\ntype AppView = 'home' | 'select' | 'math' | 'stats' | 'settings';\n\ntype AppProps = {\n\n}\n\ntype AppState = {\n    view: AppView,\n    data: Data,\n    sessionOptions: MathSessionOptions | null\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            view: 'home',\n            data: StorageFuncs.load(),\n            sessionOptions: null\n        }\n    }\n\n    // Update Data\n    updateData(data: Data) {\n        this.setState({\n            data\n        });\n        StorageFuncs.save(data);\n    }\n\n    // General handlers\n    handleNavigate(view: AppView) {\n        this.setState({\n            view\n        })\n    }\n\n    handleStartDefaultSession(type: SessionType) {\n        let options = MathFuncs.generateDefaultSessionOptions(type);\n        this.handleStartSession(options);\n    }\n\n    // Select View\n    handleTemplateAdd(template: MathSessionTemplate) {\n        let data = Util.clone(this.state.data);\n        data.templates.push(template);\n\n        this.updateData(data);\n    }\n\n    handleTemplateRemove(index: number) {\n        let data = Util.clone(this.state.data);\n        data.templates.splice(index, 1);\n\n        this.updateData(data);\n    }\n\n    handleStartSession(options: MathSessionOptions) {\n        let view: 'math' = 'math';\n        this.setState({\n            view,\n            sessionOptions: options\n        });\n    }\n\n    // Math Session View\n    handleFinishSession(result: MathSessionResults) {\n        alert(\"Finished session in \" + Util.formatSeconds(result.totalTime));\n\n        let data = this.state.data;\n        data.history.push(result);\n        this.setState({\n            view: 'stats',\n            data\n        });\n        this.updateData(data);\n    }\n\n    // Settings View\n    handleUpdateSettings(settings: Settings) {\n        let data = this.state.data;\n        data.settings = settings;\n        this.updateData(data);\n    }\n\n    handleImportData(text: string): boolean {\n        try {\n            let data = StorageFuncs.deserialize(text);\n            this.updateData(data);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    // ~~Blender~~ render\n    render() {\n        let data = this.state.data;\n        let sessionOptions = this.state.sessionOptions;\n        let settings = this.state.data.settings;\n\n        let child: React.ReactNode;\n        let title: string = \"\";\n        let showExit: boolean = false;\n        let onExit = () => this.handleNavigate('home');\n        let exitPrompt: string | null = null;\n\n        if (this.state.view === 'home') {\n            title = \"Math Practice\";\n            showExit = false;\n            child = <HomeView\n                history={data.history}\n                onStartPractice={this.handleStartDefaultSession.bind(this)}\n                onNavigateSelectSession={() => this.handleNavigate('select')}\n                onNavigateStats={() => this.handleNavigate('stats')}\n                onNavigateSettings={() => this.handleNavigate('settings')}\n            />;\n        } else if (this.state.view === 'select') {\n            title = \"Custom Practice\";\n            showExit = true;\n            child = <SelectView\n                sessionTemplates={data.templates}\n                onAddSessionTemplate={this.handleTemplateAdd.bind(this)}\n                onRemoveSessionTemplate={this.handleTemplateRemove.bind(this)}\n                onStartSession={this.handleStartSession.bind(this)}\n            />\n        } else if (this.state.view === 'math') {\n            title = SessionTypeNames[sessionOptions!.type];\n            showExit = true;\n            exitPrompt = \"Are you sure you want to quit practice now?\";\n            child = <MathView\n                settings={settings}\n                options={sessionOptions!}\n                onFinishSession={this.handleFinishSession.bind(this)}\n            />\n        } else if (this.state.view === 'stats') {\n            title = \"User Statistics\";\n            showExit = true;\n            child = <StatsView\n                history={data.history} />\n        } else if (this.state.view === 'settings') {\n            title = \"Settings\";\n            showExit = true;\n            child = <SettingsView\n                data={data}\n                settings={settings}\n                onUpdateSettings={this.handleUpdateSettings.bind(this)}\n                onImportSettings={this.handleImportData.bind(this)}\n            />\n        }\n\n        return (\n            <AppContainer\n                title={title}\n                exitPrompt={exitPrompt}\n                onExit={onExit}\n                showExit={showExit}>\n                {child}\n            </AppContainer>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}